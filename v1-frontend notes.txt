This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-22T20:54:43.385Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.trunk/
  configs/
    .markdownlint.yaml
    svgo.config.js
  .gitignore
  trunk.yaml
cms-backend/
  prisma/
    migrations/
      20241222172256_insurer_data/
        migration.sql
      20241222173222_update_user_roles/
        migration.sql
      20241222204653_update_user_model/
        migration.sql
      migration_lock.toml
    old.schema
    schema.prisma
    seed.js
  src/
    config/
      app.ts
      supabase.ts
      swagger.ts
    controllers/
      auth.controller.ts
      claims.controller.ts
      insurers.controller.ts
    middleware/
      asyncHandler.ts
      auth.ts
      docs.ts
      errorHandler.ts
    routes/
      auth.ts
      claims.ts
      insurers.ts
    scripts/
      createSudoUser.ts
    types/
      api.ts
      auth.ts
    utils/
      apiResponse.ts
      asyncHandler.ts
      errors.ts
    index.ts
    instrument.ts
  .eslintrc.json
  .gitignore
  backend-notes.txt
  package.json
  README.md
  tsconfig.json
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    claims/
      modals/
        UploadModal.tsx
      tabs/
        parts/
          ActionButtons.tsx
          FinancialSummary.tsx
          PartEntryForm.tsx
          PartsTab.tsx
          PartsTable.tsx
          ShopInvoice.tsx
          ShopInvoiceUpload.tsx
        AnnexesTab.tsx
        ClaimInfoTab copy.tsx
        ClaimInfoTab.tsx
      ClaimsTable.tsx
      FilterBar.tsx
      NewClaimForm.tsx
      StatusBadge.tsx
    common/
      AddressAutocomplete.tsx
    layout/
      Header.tsx
      MainLayout.tsx
      Sidebar.tsx
  hooks/
    useInsurers.ts
  lib/
    api.ts
  pages/
    Dashboard.tsx
  server/
    routes/
      insurers.ts
    index.ts
  types/
    google-maps.d.ts
    index.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.example
.gitignore
document-checkpoint1.md
eslint.config.js
frontend notes.txt
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .trunk/configs/.markdownlint.yaml
================
# Prettier friendly markdownlint config (all formatting rules disabled)
extends: markdownlint/style/prettier

================
File: .trunk/configs/svgo.config.js
================
module.exports = {
  plugins: [
    {
      name: "preset-default",
      params: {
        overrides: {
          removeViewBox: false, // https://github.com/svg/svgo/issues/1128
          sortAttrs: true,
          removeOffCanvasPaths: true,
        },
      },
    },
  ],
};

================
File: .trunk/.gitignore
================
*out
*logs
*actions
*notifications
*tools
plugins
user_trunk.yaml
user.yaml
tmp

================
File: .trunk/trunk.yaml
================
# This file controls the behavior of Trunk: https://docs.trunk.io/cli
# To learn more about the format of this file, see https://docs.trunk.io/reference/trunk-yaml
version: 0.1
cli:
  version: 1.22.8
# Trunk provides extensibility via plugins. (https://docs.trunk.io/plugins)
plugins:
  sources:
    - id: trunk
      ref: v1.6.6
      uri: https://github.com/trunk-io/plugins
# Many linters and tools depend on runtimes - configure them here. (https://docs.trunk.io/runtimes)
runtimes:
  enabled:
    - node@18.20.5
    - python@3.10.8
# This is the section where you manage your linters. (https://docs.trunk.io/check/configuration)
lint:
  enabled:
    - checkov@3.2.343
    - eslint@9.17.0
    - git-diff-check
    - markdownlint@0.43.0
    - osv-scanner@1.9.2
    - prettier@3.4.2
    - svgo@3.3.2
    - trufflehog@3.87.2
actions:
  disabled:
    - trunk-announce
    - trunk-check-pre-push
    - trunk-fmt-pre-commit
  enabled:
    - trunk-upgrade-available

================
File: cms-backend/prisma/migrations/20241222172256_insurer_data/migration.sql
================
-- CreateSchema
CREATE SCHEMA IF NOT EXISTS "auth";

-- CreateEnum
CREATE TYPE "public"."LaborType" AS ENUM ('FLAT', 'MULTIPLIER');

-- CreateEnum
CREATE TYPE "public"."Role" AS ENUM ('ADMIN', 'MANAGER', 'USER');

-- CreateEnum
CREATE TYPE "public"."ClaimStatus" AS ENUM ('DRAFT', 'SUBMITTED', 'IN_REVIEW', 'APPROVED', 'REJECTED', 'COMPLETED');

-- CreateTable
CREATE TABLE "public"."User" (
    "id" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "name" TEXT,
    "role" "public"."Role" NOT NULL DEFAULT 'USER',
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Claim" (
    "id" TEXT NOT NULL,
    "claimNumber" TEXT NOT NULL,
    "status" "public"."ClaimStatus" NOT NULL DEFAULT 'DRAFT',
    "assignedToId" TEXT,
    "totalAmount" DOUBLE PRECISION NOT NULL DEFAULT 0,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Claim_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."VehicleInfo" (
    "id" TEXT NOT NULL,
    "make" TEXT NOT NULL,
    "model" TEXT NOT NULL,
    "year" INTEGER NOT NULL,
    "vin" TEXT NOT NULL,
    "claimId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "VehicleInfo_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Part" (
    "id" TEXT NOT NULL,
    "partNumber" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "quantity" INTEGER NOT NULL,
    "unitPrice" DOUBLE PRECISION NOT NULL,
    "claimId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Part_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Document" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "url" TEXT NOT NULL,
    "claimId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Document_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Insurer" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "address" TEXT NOT NULL,
    "phone" TEXT NOT NULL,
    "billingEmail" TEXT NOT NULL,
    "carrierNote" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Insurer_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."PricingRules" (
    "id" TEXT NOT NULL,
    "domesticWindshield" DOUBLE PRECISION NOT NULL,
    "domesticTempered" DOUBLE PRECISION NOT NULL,
    "foreignWindshield" DOUBLE PRECISION NOT NULL,
    "foreignTempered" DOUBLE PRECISION NOT NULL,
    "oem" DOUBLE PRECISION NOT NULL,
    "laborType" "public"."LaborType" NOT NULL,
    "laborTypeValue" DOUBLE PRECISION NOT NULL,
    "glassLaborRate" DOUBLE PRECISION NOT NULL,
    "defaultHourlyRate" DOUBLE PRECISION NOT NULL,
    "laborDomesticWindshield" DOUBLE PRECISION NOT NULL,
    "laborDomesticTempered" DOUBLE PRECISION NOT NULL,
    "laborForeignWindshield" DOUBLE PRECISION NOT NULL,
    "laborForeignTempered" DOUBLE PRECISION NOT NULL,
    "otherKitFlat" DOUBLE PRECISION NOT NULL,
    "kitFlat1" DOUBLE PRECISION NOT NULL,
    "kitFlat1_5" DOUBLE PRECISION NOT NULL,
    "kitFlat2" DOUBLE PRECISION NOT NULL,
    "kitFlat2_5" DOUBLE PRECISION NOT NULL,
    "kitFlat3" DOUBLE PRECISION NOT NULL,
    "insurerId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "PricingRules_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "public"."User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "Claim_claimNumber_key" ON "public"."Claim"("claimNumber");

-- CreateIndex
CREATE UNIQUE INDEX "VehicleInfo_claimId_key" ON "public"."VehicleInfo"("claimId");

-- CreateIndex
CREATE UNIQUE INDEX "PricingRules_insurerId_key" ON "public"."PricingRules"("insurerId");

-- AddForeignKey
ALTER TABLE "public"."Claim" ADD CONSTRAINT "Claim_assignedToId_fkey" FOREIGN KEY ("assignedToId") REFERENCES "public"."User"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."VehicleInfo" ADD CONSTRAINT "VehicleInfo_claimId_fkey" FOREIGN KEY ("claimId") REFERENCES "public"."Claim"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."Part" ADD CONSTRAINT "Part_claimId_fkey" FOREIGN KEY ("claimId") REFERENCES "public"."Claim"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."Document" ADD CONSTRAINT "Document_claimId_fkey" FOREIGN KEY ("claimId") REFERENCES "public"."Claim"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."PricingRules" ADD CONSTRAINT "PricingRules_insurerId_fkey" FOREIGN KEY ("insurerId") REFERENCES "public"."Insurer"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

================
File: cms-backend/prisma/migrations/20241222173222_update_user_roles/migration.sql
================
/*
  Warnings:

  - The values [MANAGER] on the enum `Role` will be removed. If these variants are still used in the database, this will fail.

*/
-- AlterEnum
BEGIN;
CREATE TYPE "public"."Role_new" AS ENUM ('USER', 'CCA', 'CCM', 'ADMIN', 'SUDO');
ALTER TABLE "public"."User" ALTER COLUMN "role" DROP DEFAULT;
ALTER TABLE "public"."User" ALTER COLUMN "role" TYPE "public"."Role_new" USING ("role"::text::"public"."Role_new");
ALTER TYPE "public"."Role" RENAME TO "Role_old";
ALTER TYPE "public"."Role_new" RENAME TO "Role";
DROP TYPE "public"."Role_old";
ALTER TABLE "public"."User" ALTER COLUMN "role" SET DEFAULT 'USER';
COMMIT;

================
File: cms-backend/prisma/migrations/20241222204653_update_user_model/migration.sql
================
/*
  Warnings:

  - You are about to drop the `User` table. If the table is not empty, all the data it contains will be lost.

*/
-- DropForeignKey
ALTER TABLE "public"."Claim" DROP CONSTRAINT "Claim_assignedToId_fkey";

-- DropTable
DROP TABLE "public"."User";

-- CreateTable
CREATE TABLE "public"."users" (
    "id" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "first_name" TEXT,
    "last_name" TEXT,
    "phone" TEXT,
    "role" "public"."Role" NOT NULL,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "users_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "users_email_key" ON "public"."users"("email");

-- AddForeignKey
ALTER TABLE "public"."Claim" ADD CONSTRAINT "Claim_assignedToId_fkey" FOREIGN KEY ("assignedToId") REFERENCES "public"."users"("id") ON DELETE SET NULL ON UPDATE CASCADE;

================
File: cms-backend/prisma/migrations/migration_lock.toml
================
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"

================
File: cms-backend/prisma/old.schema
================
// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  claims    Claim[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Claim {
  id            String         @id @default(uuid())
  claimNumber   String        @unique
  status        ClaimStatus   @default(DRAFT)
  vehicleInfo   VehicleInfo?
  parts         Part[]
  documents     Document[]
  assignedTo    User?         @relation(fields: [assignedToId], references: [id])
  assignedToId  String?
  totalAmount   Float         @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VehicleInfo {
  id          String   @id @default(uuid())
  make        String
  model       String
  year        Int
  vin         String
  claim       Claim    @relation(fields: [claimId], references: [id])
  claimId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Part {
  id          String    @id @default(uuid())
  partNumber  String
  description String
  quantity    Int
  unitPrice   Float
  claim       Claim     @relation(fields: [claimId], references: [id])
  claimId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          String    @id @default(uuid())
  name        String
  type        String
  url         String
  claim       Claim     @relation(fields: [claimId], references: [id])
  claimId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

================
File: cms-backend/prisma/schema.prisma
================
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
  schemas  = ["auth", "public"]
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  first_name String?
  last_name  String?
  phone      String?
  role       Role
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  claims     Claim[]

  @@schema("public")
  @@map("users")
}

model Claim {
  id           String       @id @default(uuid())
  claimNumber  String       @unique
  status       ClaimStatus  @default(DRAFT)
  assignedToId String?
  totalAmount  Float        @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignedTo   User?        @relation(fields: [assignedToId], references: [id])
  documents    Document[]
  parts        Part[]
  vehicleInfo  VehicleInfo?

  @@schema("public")
}

model VehicleInfo {
  id        String   @id @default(uuid())
  make      String
  model     String
  year      Int
  vin       String
  claimId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claim     Claim    @relation(fields: [claimId], references: [id])

  @@schema("public")
}

model Part {
  id          String   @id @default(uuid())
  partNumber  String
  description String
  quantity    Int
  unitPrice   Float
  claimId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  claim       Claim    @relation(fields: [claimId], references: [id])

  @@schema("public")
}

model Document {
  id        String   @id @default(uuid())
  name      String
  type      String
  url       String
  claimId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claim     Claim    @relation(fields: [claimId], references: [id])

  @@schema("public")
}

model Insurer {
  id           String        @id @default(uuid())
  name         String
  address      String
  phone        String
  billingEmail String
  carrierNote  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  pricingRules PricingRules?

  @@schema("public")
}

model PricingRules {
  id                      String    @id @default(uuid())
  domesticWindshield      Float
  domesticTempered        Float
  foreignWindshield       Float
  foreignTempered         Float
  oem                     Float
  laborType               LaborType
  laborTypeValue          Float
  glassLaborRate          Float
  defaultHourlyRate       Float
  laborDomesticWindshield Float
  laborDomesticTempered   Float
  laborForeignWindshield  Float
  laborForeignTempered    Float
  otherKitFlat            Float
  kitFlat1                Float
  kitFlat1_5              Float
  kitFlat2                Float
  kitFlat2_5              Float
  kitFlat3                Float
  insurerId               String    @unique
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  insurer                 Insurer   @relation(fields: [insurerId], references: [id])

  @@schema("public")
}

enum LaborType {
  FLAT
  MULTIPLIER

  @@schema("public")
}

enum Role {
  USER
  CCA
  CCM
  ADMIN
  SUDO

  @@schema("public")
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED

  @@schema("public")
}

================
File: cms-backend/prisma/seed.js
================
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function main() {
  const email = "sudo@example.com";

  try {
    const user = await prisma.user.upsert({
      where: { email: email },
      update: {},
      create: {
        email: email,
        first_name: "Super",
        last_name: "Admin",
        role: "SUDO",
        phone: null, // Add phone number if available
      },
    });

    console.log("User created or updated:", user);

    // Note: Supabase trigger should automatically create the corresponding Auth user
    console.log(
      "A Supabase trigger should create the corresponding Auth user automatically."
    );
    console.log(
      "Please check your Supabase dashboard to confirm the Auth user was created."
    );
  } catch (error) {
    console.error("Error creating/updating user:", error);
  }
}

main()
  .catch((e) => console.error(e))
  .finally(async () => {
    await prisma.$disconnect();
  });

================
File: cms-backend/src/config/app.ts
================
// src/config/app.ts
import dotenv from "dotenv";

dotenv.config();

export const config = {
  app: {
    name: "CMS Backend",
    port: process.env.PORT || 5001,
    env: process.env.NODE_ENV || "development",
  },
  supabase: {
    url: process.env.SUPABASE_URL,
    anonKey: process.env.SUPABASE_ANON_KEY,
    serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
  },
  sentry: {
    dsn: process.env.SENTRY_DSN,
  },
  database: {
    url: process.env.DATABASE_URL,
    directUrl: process.env.DIRECT_URL,
  },
};

================
File: cms-backend/src/config/supabase.ts
================
// src/config/supabase.ts
import { createClient } from "@supabase/supabase-js";
import { config } from "./app";

if (!config.supabase.url || !config.supabase.anonKey) {
  throw new Error("Missing Supabase configuration");
}

export const supabase = createClient(
  config.supabase.url,
  config.supabase.anonKey
);

// Define the enum first
export enum UserRole {
  USER = "USER", // Web user
  CCA = "CCA", // Call Centre Agent
  CCM = "CCM", // Call Centre Manager
  ADMIN = "ADMIN", // Administrator
  SUDO = "SUDO", // Super Admin
}

// Then use it in ROLE_HIERARCHY
export const ROLE_HIERARCHY: Record<UserRole, number> = {
  [UserRole.SUDO]: 5,
  [UserRole.ADMIN]: 4,
  [UserRole.CCM]: 3,
  [UserRole.CCA]: 2,
  [UserRole.USER]: 1,
};

// Add a type guard function to check if a string is a valid UserRole
export function isValidUserRole(role: string): role is UserRole {
  return Object.values(UserRole).includes(role as UserRole);
}

================
File: cms-backend/src/config/swagger.ts
================
// src/config/swagger.ts
import swaggerJsdoc from "swagger-jsdoc";

const options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "CMS Backend API Documentation",
      version: "1.0.0",
      description: "Documentation for the Claims Management System API",
      license: {
        name: "MIT",
        url: "https://spdx.org/licenses/MIT.html",
      },
      contact: {
        name: "API Support",
        url: "https://your-support-url.com",
        email: "your-email@example.com",
      },
    },
    servers: [
      {
        url: "http://localhost:5001",
        description: "Development server",
      },
      {
        url: "https://your-production-url.com",
        description: "Production server",
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: "http",
          scheme: "bearer",
          bearerFormat: "JWT",
        },
      },
    },
  },
  apis: ["./src/routes/*.ts"], // Path to the API routes
};

export const specs = swaggerJsdoc(options);

================
File: cms-backend/src/controllers/auth.controller.ts
================
// src/controllers/auth.controller.ts
import { Request, Response } from "express";
import { supabase } from "../config/supabase";
import { ApiResponse } from "../utils/apiResponse";
import { AppError } from "../utils/errors";
import { AuthenticatedRequest } from "../middleware/auth";
import {
  LoginRequest,
  RegisterRequest,
  UpdateProfileRequest,
} from "../types/auth";

export class AuthController {
  static async register(req: Request, res: Response) {
    try {
      const {
        email,
        password,
        firstName,
        lastName,
        phone,
        role,
      }: RegisterRequest = req.body;

      // Register user with Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password,
      });

      if (authError) throw new AppError(authError.message, 400);

      // Create user profile
      const { data: profileData, error: profileError } = await supabase
        .from("users") // Changed from user_profiles to users
        .insert({
          id: authData.user!.id,
          email,
          first_name: firstName,
          last_name: lastName,
          phone,
          role: role || "USER",
          created_at: new Date(),
          updated_at: new Date(),
        })
        .single();

      if (profileError) throw new AppError(profileError.message, 400);

      return ApiResponse.success(
        res,
        profileData,
        "User registered successfully",
        201
      );
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }

  static async login(req: Request, res: Response) {
    try {
      const { email, password }: LoginRequest = req.body;

      // Authenticate with Supabase
      const { data: authData, error: authError } =
        await supabase.auth.signInWithPassword({
          email,
          password,
        });

      if (authError) throw new AppError(authError.message, 401);

      // Fetch user profile including role
      const { data: userData, error: userError } = await supabase
        .from("users")
        .select("*")
        .eq("id", authData.user.id)
        .single();

      if (userError) throw new AppError(userError.message, 400);

      // Update last sign in
      await supabase
        .from("users")
        .update({ updated_at: new Date() })
        .eq("id", authData.user.id);

      // Combine auth data with user profile
      const responseData = {
        user: {
          ...authData.user,
          ...userData, // This will include the role
        },
        session: authData.session,
      };

      return ApiResponse.success(res, responseData, "Login successful");
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }

  static async logout(req: AuthenticatedRequest, res: Response) {
    try {
      const { error } = await supabase.auth.signOut();

      if (error) throw new AppError(error.message, 400);

      return ApiResponse.success(res, null, "Logout successful");
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }

  static async getProfile(req: AuthenticatedRequest, res: Response) {
    try {
      const { data: profile, error } = await supabase
        .from("users")
        .select("*")
        .eq("id", req.user.id)
        .single();

      if (error) throw new AppError(error.message, 400);

      return ApiResponse.success(
        res,
        profile,
        "Profile retrieved successfully"
      );
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }

  static async updateProfile(req: AuthenticatedRequest, res: Response) {
    try {
      const { firstName, lastName, phone }: UpdateProfileRequest = req.body;

      const { data, error } = await supabase
        .from("users") // Changed from user_profiles to users
        .update({
          first_name: firstName,
          last_name: lastName,
          phone,
          updated_at: new Date(),
        })
        .eq("id", req.user.id)
        .single();

      if (error) throw new AppError(error.message, 400);

      return ApiResponse.success(res, data, "Profile updated successfully");
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }
}

================
File: cms-backend/src/controllers/claims.controller.ts
================
import { Request, Response } from "express";
import { PrismaClient } from "@prisma/client";
import { asyncHandler } from "../middleware/asyncHandler";

const prisma = new PrismaClient();

// Get all claims with pagination
export const getClaims = asyncHandler(async (req: Request, res: Response) => {
  const page = parseInt(req.query.page as string) || 1;
  const limit = parseInt(req.query.limit as string) || 10;
  const skip = (page - 1) * limit;

  const [claims, total] = await Promise.all([
    prisma.claim.findMany({
      skip,
      take: limit,
      include: {
        vehicleInfo: true,
        assignedTo: {
          select: {
            id: true,
            name: true,
            email: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    }),
    prisma.claim.count(),
  ]);

  res.json({
    success: true,
    data: claims,
    pagination: {
      total,
      page,
      pages: Math.ceil(total / limit),
      limit,
    },
  });
});

// Get single claim
export const getClaim = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const claim = await prisma.claim.findUnique({
    where: { id },
    include: {
      vehicleInfo: true,
      parts: true,
      documents: true,
      assignedTo: {
        select: {
          id: true,
          name: true,
          email: true,
        },
      },
    },
  });

  if (!claim) {
    return res.status(404).json({
      success: false,
      error: "Claim not found",
    });
  }

  res.json({
    success: true,
    data: claim,
  });
});

// Create new claim
export const createClaim = asyncHandler(async (req: Request, res: Response) => {
  const { vehicleInfo, ...claimData } = req.body;

  const claim = await prisma.claim.create({
    data: {
      ...claimData,
      vehicleInfo: {
        create: vehicleInfo,
      },
    },
    include: {
      vehicleInfo: true,
    },
  });

  res.status(201).json({
    success: true,
    data: claim,
  });
});

// Update claim
export const updateClaim = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const { vehicleInfo, ...claimData } = req.body;

  const claim = await prisma.claim.update({
    where: { id },
    data: {
      ...claimData,
      vehicleInfo: vehicleInfo
        ? {
            update: vehicleInfo,
          }
        : undefined,
    },
    include: {
      vehicleInfo: true,
      parts: true,
      documents: true,
    },
  });

  res.json({
    success: true,
    data: claim,
  });
});

// Delete claim
export const deleteClaim = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  await prisma.claim.delete({
    where: { id },
  });

  res.json({
    success: true,
    data: {},
  });
});

// Add part to claim
export const addPartToClaim = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const partData = req.body;

    const part = await prisma.part.create({
      data: {
        ...partData,
        claim: {
          connect: { id },
        },
      },
    });

    // Update claim total amount
    await prisma.claim.update({
      where: { id },
      data: {
        totalAmount: {
          increment: partData.quantity * partData.unitPrice,
        },
      },
    });

    res.status(201).json({
      success: true,
      data: part,
    });
  }
);

// Upload document
export const uploadDocument = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const { name, type, url } = req.body;

    const document = await prisma.document.create({
      data: {
        name,
        type,
        url,
        claim: {
          connect: { id },
        },
      },
    });

    res.status(201).json({
      success: true,
      data: document,
    });
  }
);

================
File: cms-backend/src/controllers/insurers.controller.ts
================
import { Request, Response, NextFunction } from "express";
import { PrismaClient } from "@prisma/client";
import { AppError } from "../utils/errors";
import { ApiResponse } from "../utils/apiResponse";
import { asyncHandler } from "../utils/asyncHandler";

const prisma = new PrismaClient();

export const createInsurer = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { name, address, phone, billingEmail, carrierNote, pricingRules } =
      req.body;

    const insurer = await prisma.insurer.create({
      data: {
        name,
        address,
        phone,
        billingEmail,
        carrierNote,
        pricingRules: {
          create: pricingRules,
        },
      },
      include: {
        pricingRules: true,
      },
    });

    ApiResponse.success(res, insurer, "Insurer created successfully", 201);
  }
);

export const getInsurers = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const insurers = await prisma.insurer.findMany({
      include: {
        pricingRules: true,
      },
    });

    ApiResponse.success(res, insurers, "Insurers retrieved successfully");
  }
);

export const getInsurer = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    const insurer = await prisma.insurer.findUnique({
      where: { id },
      include: {
        pricingRules: true,
      },
    });

    if (!insurer) {
      throw new AppError("Insurer not found", 404);
    }

    ApiResponse.success(res, insurer, "Insurer retrieved successfully");
  }
);

export const updateInsurer = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;
    const { name, address, phone, billingEmail, carrierNote, pricingRules } =
      req.body;

    const insurer = await prisma.insurer.update({
      where: { id },
      data: {
        name,
        address,
        phone,
        billingEmail,
        carrierNote,
        pricingRules: {
          update: pricingRules,
        },
      },
      include: {
        pricingRules: true,
      },
    });

    ApiResponse.success(res, insurer, "Insurer updated successfully");
  }
);

export const deleteInsurer = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    await prisma.insurer.delete({
      where: { id },
    });

    ApiResponse.success(res, null, "Insurer deleted successfully");
  }
);

================
File: cms-backend/src/middleware/asyncHandler.ts
================
import { Request, Response, NextFunction, RequestHandler } from "express";

type AsyncRequestHandler = (
  req: Request,
  res: Response,
  next: NextFunction
) => Promise<any>;

export const asyncHandler =
  (fn: AsyncRequestHandler): RequestHandler =>
  (req: Request, res: Response, next: NextFunction): void => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };

================
File: cms-backend/src/middleware/auth.ts
================
// src/middleware/auth.ts
import { Request, Response, NextFunction } from "express";
import { supabase, UserRole, ROLE_HIERARCHY } from "../config/supabase";
import { AppError } from "../utils/errors";
import { ApiResponse } from "../utils/apiResponse";

export interface AuthenticatedRequest extends Request {
  user?: any;
}

export const authenticate = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
      throw new AppError("No authentication token provided", 401);
    }

    const {
      data: { user },
      error,
    } = await supabase.auth.getUser(token);

    if (error || !user) {
      throw new AppError("Invalid or expired token", 401);
    }

    // Get user's role from user_profiles table
    const { data: profile, error: profileError } = await supabase
      .from("user_profiles")
      .select("*")
      .eq("id", user.id)
      .single();

    if (profileError || !profile) {
      throw new AppError("User profile not found", 404);
    }

    req.user = { ...user, ...profile };
    next();
  } catch (error) {
    return ApiResponse.error(res, error.message, error.statusCode || 500);
  }
};

export const authorize = (...allowedRoles: UserRole[]) => {
  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    try {
      if (!req.user || !req.user.role) {
        throw new AppError("User not authenticated", 401);
      }

      const userRoleLevel = ROLE_HIERARCHY[req.user.role];
      const hasPermission = allowedRoles.some(
        (role) => ROLE_HIERARCHY[role] <= userRoleLevel
      );

      if (!hasPermission) {
        throw new AppError("Insufficient permissions", 403);
      }

      next();
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  };
};

================
File: cms-backend/src/middleware/docs.ts
================
// src/middleware/docs.ts
import { Express, Request, Response } from "express";
import swaggerUi from "swagger-ui-express";
import { specs } from "../config/swagger";

export const setupDocs = (app: Express) => {
  // Swagger documentation route
  app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(specs));

  // JSON version of documentation
  app.get("/api-docs.json", (req: Request, res: Response) => {
    res.setHeader("Content-Type", "application/json");
    res.send(specs);
  });
};

================
File: cms-backend/src/middleware/errorHandler.ts
================
// src/middleware/errorHandler.ts
import { Request, Response, NextFunction } from "express";
import * as Sentry from "@sentry/node";
import { config } from "../config/app";
import { AppError } from "../utils/errors";

export const errorHandler = (
  error: Error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  // Log error
  console.error(error);

  // Capture error in Sentry
  Sentry.captureException(error);

  // Check if error is operational
  if (error instanceof AppError) {
    return res.status(error.statusCode).json({
      status: error.status,
      message: error.message,
      ...(config.app.env === "development" && { stack: error.stack }),
    });
  }

  // Handle unexpected errors
  return res.status(500).json({
    status: "error",
    message: "Something went wrong!",
    ...(config.app.env === "development" && { stack: error.stack }),
    ...(res.sentry ? { sentryEventId: res.sentry } : {}),
  });
};

================
File: cms-backend/src/routes/auth.ts
================
// src/routes/auth.ts
import { Router } from "express";
import { AuthController } from "../controllers/auth.controller";
import { authenticate, authorize } from "../middleware/auth";
import { UserRole } from "../config/supabase";
import { asyncHandler } from "../middleware/asyncHandler";

const router = Router();

/**
 * @swagger
 * /auth/register:
 *   post:
 *     summary: Register a new user
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *               - firstName
 *               - lastName
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *               firstName:
 *                 type: string
 *               lastName:
 *                 type: string
 *               phone:
 *                 type: string
 *               role:
 *                 type: string
 *                 enum: [USER, CCA, CCM, ADMIN, SUDO]
 */
router.post(
  "/register",
  authenticate,
  authorize(UserRole.ADMIN, UserRole.SUDO),
  asyncHandler(AuthController.register)
);

/**
 * @swagger
 * /auth/login:
 *   post:
 *     summary: Login to the application
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 */
router.post("/login", asyncHandler(AuthController.login));

/**
 * @swagger
 * /auth/logout:
 *   post:
 *     summary: Logout from the application
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: []
 */
router.post("/logout", authenticate, asyncHandler(AuthController.logout));

/**
 * @swagger
 * /auth/profile:
 *   get:
 *     summary: Get user profile
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: []
 */
router.get("/profile", authenticate, asyncHandler(AuthController.getProfile));

/**
 * @swagger
 * /auth/profile:
 *   put:
 *     summary: Update user profile
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               firstName:
 *                 type: string
 *               lastName:
 *                 type: string
 *               phone:
 *                 type: string
 */
router.put(
  "/profile",
  authenticate,
  asyncHandler(AuthController.updateProfile)
);

export default router;

================
File: cms-backend/src/routes/claims.ts
================
import express from "express";
import {
  getClaims,
  getClaim,
  createClaim,
  updateClaim,
  deleteClaim,
  addPartToClaim,
  uploadDocument,
} from "../controllers/claims.controller";
import { authenticate } from "../middleware/auth";
import { asyncHandler } from "../middleware/asyncHandler";

const router = express.Router();

/**
 * @swagger
 * /api/claims:
 *   get:
 *     summary: Get all claims with pagination
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Number of items per page
 *     responses:
 *       200:
 *         description: List of claims
 */
router.get("/", authenticate, asyncHandler(getClaims));

/**
 * @swagger
 * /api/claims/{id}:
 *   get:
 *     summary: Get a single claim by ID
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Claim details
 *       404:
 *         description: Claim not found
 */
router.get("/:id", authenticate, asyncHandler(getClaim));

/**
 * @swagger
 * /api/claims:
 *   post:
 *     summary: Create a new claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - claimNumber
 *               - vehicleInfo
 *             properties:
 *               claimNumber:
 *                 type: string
 *               vehicleInfo:
 *                 type: object
 *     responses:
 *       201:
 *         description: Claim created successfully
 */
router.post("/", authenticate, asyncHandler(createClaim));

/**
 * @swagger
 * /api/claims/{id}:
 *   put:
 *     summary: Update a claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *     responses:
 *       200:
 *         description: Claim updated successfully
 *       404:
 *         description: Claim not found
 */
router.put("/:id", authenticate, asyncHandler(updateClaim));

/**
 * @swagger
 * /api/claims/{id}:
 *   delete:
 *     summary: Delete a claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Claim deleted successfully
 *       404:
 *         description: Claim not found
 */
router.delete("/:id", authenticate, asyncHandler(deleteClaim));

/**
 * @swagger
 * /api/claims/{id}/parts:
 *   post:
 *     summary: Add a part to a claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - partNumber
 *               - description
 *               - quantity
 *               - unitPrice
 *             properties:
 *               partNumber:
 *                 type: string
 *               description:
 *                 type: string
 *               quantity:
 *                 type: number
 *               unitPrice:
 *                 type: number
 *     responses:
 *       201:
 *         description: Part added successfully
 */
router.post("/:id/parts", authenticate, asyncHandler(addPartToClaim));

/**
 * @swagger
 * /api/claims/{id}/documents:
 *   post:
 *     summary: Upload a document to a claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - type
 *               - url
 *             properties:
 *               name:
 *                 type: string
 *               type:
 *                 type: string
 *               url:
 *                 type: string
 *     responses:
 *       201:
 *         description: Document uploaded successfully
 */
router.post("/:id/documents", authenticate, asyncHandler(uploadDocument));

export default router;

================
File: cms-backend/src/routes/insurers.ts
================
import express from "express";
import { authenticate, authorize } from "../middleware/auth";
import { UserRole } from "../config/supabase";
import {
  createInsurer,
  getInsurers,
  getInsurer,
  updateInsurer,
  deleteInsurer,
} from "../controllers/insurers.controller";

const router = express.Router();

// Only CCM, ADMIN, and SUDO roles can access these routes
const authorizedRoles = [UserRole.CCM, UserRole.ADMIN, UserRole.SUDO];

router.post("/", authenticate, authorize(...authorizedRoles), createInsurer);
router.get("/", authenticate, authorize(...authorizedRoles), getInsurers);
router.get("/:id", authenticate, authorize(...authorizedRoles), getInsurer);
router.put("/:id", authenticate, authorize(...authorizedRoles), updateInsurer);
router.delete(
  "/:id",
  authenticate,
  authorize(...authorizedRoles),
  deleteInsurer
);

export default router;

================
File: cms-backend/src/scripts/createSudoUser.ts
================
import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error("Missing Supabase URL or service role key");
  process.exit(1);
}

// Initialize Supabase client with service_role key
const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

const setupDatabase = async () => {
  // Clean up existing data and structure
  const cleanupQueries = [
    'DROP POLICY IF EXISTS "Super admins have full access" ON public.users;',
    'DROP POLICY IF EXISTS "Users can view own record" ON public.users;',
    'DROP POLICY IF EXISTS "Enable read access for all users" ON public.users;',
    "DROP FUNCTION IF EXISTS handle_updated_at CASCADE;",
    "DROP TABLE IF EXISTS public.users CASCADE;",
    "DELETE FROM auth.users;",
  ];

  for (const query of cleanupQueries) {
    const { error } = await supabase.rpc("exec", { query });
    if (error) console.error("Error in cleanup:", error);
  }

  // Create fresh structure
  const setupQueries = [
    `CREATE TABLE public.users (
      id UUID REFERENCES auth.users(id) PRIMARY KEY,
      email TEXT UNIQUE NOT NULL,
      first_name TEXT,
      last_name TEXT,
      phone TEXT,
      role TEXT NOT NULL CHECK (role IN ('USER', 'CCA', 'CCM', 'ADMIN', 'SUDO')),
      created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
    );`,
    "ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;",
    `CREATE POLICY "Users can view own record" ON public.users
      FOR SELECT
      USING (auth.uid() = id);`,
    "GRANT ALL ON public.users TO authenticated;",
    "GRANT ALL ON public.users TO service_role;",
    "CREATE INDEX idx_users_email ON public.users(email);",
    "CREATE INDEX idx_users_role ON public.users(role);",
  ];

  for (const query of setupQueries) {
    const { error } = await supabase.rpc("exec", { query });
    if (error) console.error("Error in setup:", error);
  }
};

const createSudoUser = async () => {
  const email = "newtrojan@gmail.com";
  const password = "Test123!";

  // Create user in Supabase Auth
  const { data: authData, error: authError } =
    await supabase.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
      user_metadata: { role: "SUDO" },
    });

  if (authError) {
    console.error("Error creating sudo user in Auth:", authError);
    return;
  }

  console.log("Sudo user created in Auth:", authData);

  // Insert user into public.users table
  const { data: userData, error: userError } = await supabase
    .from("users")
    .insert([
      {
        id: authData.user.id,
        email: email,
        first_name: "Super",
        last_name: "Admin",
        role: "SUDO",
      },
    ]);

  if (userError) {
    console.error("Error inserting user into public.users table:", userError);
  } else {
    console.log("User inserted into public.users table:", userData);
  }

  console.log("Sudo user created with email:", email);
  console.log("Password:", password);
  console.log("Please change the password after first login.");
};

const main = async () => {
  await setupDatabase();
  await createSudoUser();
};

main().catch(console.error);

================
File: cms-backend/src/types/api.ts
================
// src/types/api.ts
export interface ErrorResponse {
  error: string;
  details?: any;
}

export interface SuccessResponse<T> {
  data: T;
  message?: string;
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
}

================
File: cms-backend/src/types/auth.ts
================
// src/types/auth.ts

export enum UserRole {
  USER = "USER", // Web user
  CCA = "CCA", // Call Centre Agent
  CCM = "CCM", // Call Centre Manager
  ADMIN = "ADMIN", // Administrator
  SUDO = "SUDO", // Super Admin
}

export const ROLE_HIERARCHY = {
  [UserRole.SUDO]: 5,
  [UserRole.ADMIN]: 4,
  [UserRole.CCM]: 3,
  [UserRole.CCA]: 2,
  [UserRole.USER]: 1,
};

// Role permissions interface
export interface RolePermissions {
  canViewDashboard: boolean;
  canHandleCalls: boolean;
  canManageAgents: boolean;
  canViewReports: boolean;
  canManageUsers: boolean;
  canManageSystem: boolean;
}

// Default permissions for each role
export const ROLE_PERMISSIONS: Record<UserRole, RolePermissions> = {
  [UserRole.SUDO]: {
    canViewDashboard: true,
    canHandleCalls: true,
    canManageAgents: true,
    canViewReports: true,
    canManageUsers: true,
    canManageSystem: true,
  },
  [UserRole.ADMIN]: {
    canViewDashboard: true,
    canHandleCalls: true,
    canManageAgents: true,
    canViewReports: true,
    canManageUsers: true,
    canManageSystem: false,
  },
  [UserRole.CCM]: {
    canViewDashboard: true,
    canHandleCalls: true,
    canManageAgents: true,
    canViewReports: true,
    canManageUsers: false,
    canManageSystem: false,
  },
  [UserRole.CCA]: {
    canViewDashboard: true,
    canHandleCalls: true,
    canManageAgents: false,
    canViewReports: false,
    canManageUsers: false,
    canManageSystem: false,
  },
  [UserRole.USER]: {
    canViewDashboard: false,
    canHandleCalls: false,
    canManageAgents: false,
    canViewReports: false,
    canManageUsers: false,
    canManageSystem: false,
  },
};

// User interface
export interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: UserRole;
  phone?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

// Helper functions
export function hasPermission(
  role: UserRole,
  permission: keyof RolePermissions
): boolean {
  return ROLE_PERMISSIONS[role][permission];
}

export function isRoleHigherThan(role1: UserRole, role2: UserRole): boolean {
  return ROLE_HIERARCHY[role1] > ROLE_HIERARCHY[role2];
}

// Auth response types
export interface AuthResponse {
  user: User | null;
  session: any | null;
  error?: string;
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface RegisterData extends LoginCredentials {
  firstName: string;
  lastName: string;
  phone?: string;
  role?: UserRole;
}

================
File: cms-backend/src/utils/apiResponse.ts
================
// src/utils/apiResponse.ts
import { Response } from "express";
import {
  SuccessResponse,
  ErrorResponse,
  PaginatedResponse,
} from "../types/api";

export class ApiResponse {
  static success<T>(
    res: Response,
    data: T,
    message?: string,
    statusCode = 200
  ): Response {
    const response: SuccessResponse<T> = {
      data,
      message,
    };
    return res.status(statusCode).json(response);
  }

  static error(
    res: Response,
    error: string,
    statusCode = 500,
    details?: any
  ): Response {
    const response: ErrorResponse = {
      error,
      details,
    };
    return res.status(statusCode).json(response);
  }

  static paginated<T>(
    res: Response,
    data: T[],
    total: number,
    page: number,
    limit: number
  ): Response {
    const response: PaginatedResponse<T> = {
      data,
      total,
      page,
      limit,
    };
    return res.status(200).json(response);
  }
}

================
File: cms-backend/src/utils/asyncHandler.ts
================
import { Request, Response, NextFunction, RequestHandler } from "express";

type AsyncRequestHandler = (
  req: Request,
  res: Response,
  next: NextFunction
) => Promise<void | Response>;

export const asyncHandler = (fn: AsyncRequestHandler): RequestHandler => {
  return (req: Request, res: Response, next: NextFunction) => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
};

================
File: cms-backend/src/utils/errors.ts
================
// src/utils/errors.ts
export class AppError extends Error {
  statusCode: number;
  status: string;
  isOperational: boolean;

  constructor(message: string, statusCode: number) {
    super(message);
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith("4") ? "fail" : "error";
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

================
File: cms-backend/src/index.ts
================
// src/index.ts
import "./instrument"; // Must be first import
import * as Sentry from "@sentry/node";
import express from "express";
import cors from "cors";
import helmet from "helmet";
import { config } from "./config/app";
import { setupDocs } from "./middleware/docs";
import authRoutes from "./routes/auth";
import insurerRoutes from "./routes/insurers";

const app = express();

// Basic middleware
app.use(cors());
app.use(helmet());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Setup API documentation
setupDocs(app);

// Routes
app.use("/auth", authRoutes);
app.use("/insurers", insurerRoutes);

// Basic health check route
app.get("/health", (_req, res) => {
  res.json({
    status: "ok",
    timestamp: new Date(),
    environment: config.app.env,
  });
});

// Test Sentry
app.get("/debug-sentry", (_req, _res) => {
  throw new Error("My first Sentry error!");
});

// The error handler must be registered before any other error middleware and after all controllers
Sentry.setupExpressErrorHandler(app);

// Optional fallthrough error handler
app.use(function onError(
  err: Error,
  _req: express.Request,
  res: express.Response,
  _next: express.NextFunction
) {
  // The error id is attached to `res.locals.sentry` to be returned
  res.statusCode = 500;
  res.end((res.locals as any).sentry + "\n");
});

// Start server
const server = app.listen(config.app.port, () => {
  console.log(
    `🚀 Server running on port ${config.app.port} in ${config.app.env} mode`
  );
});

export default server;

================
File: cms-backend/src/instrument.ts
================
import { dotenv } from "dotenv";
// src/instrument.ts
import * as Sentry from "@sentry/node";
import { nodeProfilingIntegration } from "@sentry/profiling-node";

Sentry.init({
  dsn: process.env.SENTRY_DSN, // Replace with your actual DSN
  integrations: [nodeProfilingIntegration()],
  // Performance Monitoring
  tracesSampleRate: 1.0,
});

// Optional: Start profiler
Sentry.profiler.startProfiler();

// Optional: Create a test transaction
Sentry.startSpan(
  {
    name: "Application Startup",
  },
  () => {
    // Application startup logic here
  }
);

export { Sentry };

================
File: cms-backend/.eslintrc.json
================
{
  "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended"],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "root": true,
  "rules": {
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/no-explicit-any": ["warn", { "ignoreRestArgs": true }]
  }
}

================
File: cms-backend/.gitignore
================
# Dependencies
node_modules/

# Build
dist/

# Environment
.env
.env.*

# Logs
logs/
*.log

# IDE
.vscode/
.idea/

# Misc
.DS_Store

================
File: cms-backend/backend-notes.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-22T15:40:13.408Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
prisma/
  migrations/
    0001_create_users_table
  schema.prisma
src/
  config/
    app.ts
    supabase.ts
    swagger.ts
  controllers/
    auth.controller.ts
    claims.controller.ts
  middleware/
    asyncHandler.ts
    auth.ts
    docs.ts
    errorHandler.ts
  routes/
    auth.ts
    claims.ts
  scripts/
    seedDatabase.ts
  types/
    api.ts
    auth.ts
  utils/
    apiResponse.ts
    errors.ts
  index.ts
  instrument.ts
.gitignore
package.json
README.md
tsconfig.json

================================================================
Repository Files
================================================================

================
File: prisma/migrations/0001_create_users_table
================
-- Create users table
CREATE TABLE public.users (
    id UUID REFERENCES auth.users(id) PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    first_name TEXT,
    last_name TEXT,
    phone TEXT,
    role TEXT NOT NULL CHECK (role IN ('USER', 'CCA', 'CCM', 'ADMIN', 'SUDO')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable Row Level Security (RLS)
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their own record" ON public.users
    FOR SELECT
    USING (auth.uid() = id);

CREATE POLICY "Admins can view all records" ON public.users
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid() AND role IN ('ADMIN', 'SUDO')
        )
    );

-- Function to handle user updates
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for updated_at
CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON public.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

================
File: prisma/schema.prisma
================
// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  claims    Claim[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Claim {
  id            String         @id @default(uuid())
  claimNumber   String        @unique
  status        ClaimStatus   @default(DRAFT)
  vehicleInfo   VehicleInfo?
  parts         Part[]
  documents     Document[]
  assignedTo    User?         @relation(fields: [assignedToId], references: [id])
  assignedToId  String?
  totalAmount   Float         @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VehicleInfo {
  id          String   @id @default(uuid())
  make        String
  model       String
  year        Int
  vin         String
  claim       Claim    @relation(fields: [claimId], references: [id])
  claimId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Part {
  id          String    @id @default(uuid())
  partNumber  String
  description String
  quantity    Int
  unitPrice   Float
  claim       Claim     @relation(fields: [claimId], references: [id])
  claimId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          String    @id @default(uuid())
  name        String
  type        String
  url         String
  claim       Claim     @relation(fields: [claimId], references: [id])
  claimId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

================
File: src/config/app.ts
================
// src/config/app.ts
import dotenv from "dotenv";

dotenv.config();

export const config = {
  app: {
    name: "CMS Backend",
    port: process.env.PORT || 5001,
    env: process.env.NODE_ENV || "development",
  },
  supabase: {
    url: process.env.SUPABASE_URL,
    anonKey: process.env.SUPABASE_ANON_KEY,
    serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
  },
  sentry: {
    dsn: process.env.SENTRY_DSN,
  },
  database: {
    url: process.env.DATABASE_URL,
    directUrl: process.env.DIRECT_URL,
  },
};

================
File: src/config/supabase.ts
================
// src/config/supabase.ts
import { createClient } from "@supabase/supabase-js";
import { config } from "./app";

if (!config.supabase.url || !config.supabase.anonKey) {
  throw new Error("Missing Supabase configuration");
}

export const supabase = createClient(
  config.supabase.url,
  config.supabase.anonKey
);

// Define the enum first
export enum UserRole {
  USER = "USER", // Web user
  CCA = "CCA", // Call Centre Agent
  CCM = "CCM", // Call Centre Manager
  ADMIN = "ADMIN", // Administrator
  SUDO = "SUDO", // Super Admin
}

// Then use it in ROLE_HIERARCHY
export const ROLE_HIERARCHY: Record<UserRole, number> = {
  [UserRole.SUDO]: 5,
  [UserRole.ADMIN]: 4,
  [UserRole.CCM]: 3,
  [UserRole.CCA]: 2,
  [UserRole.USER]: 1,
};

// Add a type guard function to check if a string is a valid UserRole
export function isValidUserRole(role: string): role is UserRole {
  return Object.values(UserRole).includes(role as UserRole);
}

================
File: src/config/swagger.ts
================
// src/config/swagger.ts
import swaggerJsdoc from "swagger-jsdoc";

const options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "CMS Backend API Documentation",
      version: "1.0.0",
      description: "Documentation for the Claims Management System API",
      license: {
        name: "MIT",
        url: "https://spdx.org/licenses/MIT.html",
      },
      contact: {
        name: "API Support",
        url: "https://your-support-url.com",
        email: "your-email@example.com",
      },
    },
    servers: [
      {
        url: "http://localhost:5001",
        description: "Development server",
      },
      {
        url: "https://your-production-url.com",
        description: "Production server",
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: "http",
          scheme: "bearer",
          bearerFormat: "JWT",
        },
      },
    },
  },
  apis: ["./src/routes/*.ts"], // Path to the API routes
};

export const specs = swaggerJsdoc(options);

================
File: src/controllers/auth.controller.ts
================
// src/controllers/auth.controller.ts
import { Request, Response } from "express";
import { supabase } from "../config/supabase";
import { ApiResponse } from "../utils/apiResponse";
import { AppError } from "../utils/errors";
import { AuthenticatedRequest } from "../middleware/auth";
import {
  LoginRequest,
  RegisterRequest,
  UpdateProfileRequest,
} from "../types/auth";

export class AuthController {
  static async register(req: Request, res: Response) {
    try {
      const {
        email,
        password,
        firstName,
        lastName,
        phone,
        role,
      }: RegisterRequest = req.body;

      // Register user with Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password,
      });

      if (authError) throw new AppError(authError.message, 400);

      // Create user profile
      const { data: profileData, error: profileError } = await supabase
        .from("users") // Changed from user_profiles to users
        .insert({
          id: authData.user!.id,
          email,
          first_name: firstName,
          last_name: lastName,
          phone,
          role: role || "USER",
          created_at: new Date(),
          updated_at: new Date(),
        })
        .single();

      if (profileError) throw new AppError(profileError.message, 400);

      return ApiResponse.success(
        res,
        profileData,
        "User registered successfully",
        201
      );
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }

  static async login(req: Request, res: Response) {
    try {
      const { email, password }: LoginRequest = req.body;

      // Authenticate with Supabase
      const { data: authData, error: authError } =
        await supabase.auth.signInWithPassword({
          email,
          password,
        });

      if (authError) throw new AppError(authError.message, 401);

      // Fetch user profile including role
      const { data: userData, error: userError } = await supabase
        .from("users")
        .select("*")
        .eq("id", authData.user.id)
        .single();

      if (userError) throw new AppError(userError.message, 400);

      // Update last sign in
      await supabase
        .from("users")
        .update({ updated_at: new Date() })
        .eq("id", authData.user.id);

      // Combine auth data with user profile
      const responseData = {
        user: {
          ...authData.user,
          ...userData, // This will include the role
        },
        session: authData.session,
      };

      return ApiResponse.success(res, responseData, "Login successful");
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }

  static async logout(req: AuthenticatedRequest, res: Response) {
    try {
      const { error } = await supabase.auth.signOut();

      if (error) throw new AppError(error.message, 400);

      return ApiResponse.success(res, null, "Logout successful");
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }

  static async getProfile(req: AuthenticatedRequest, res: Response) {
    try {
      const { data: profile, error } = await supabase
        .from("users")
        .select("*")
        .eq("id", req.user.id)
        .single();

      if (error) throw new AppError(error.message, 400);

      return ApiResponse.success(
        res,
        profile,
        "Profile retrieved successfully"
      );
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }

  static async updateProfile(req: AuthenticatedRequest, res: Response) {
    try {
      const { firstName, lastName, phone }: UpdateProfileRequest = req.body;

      const { data, error } = await supabase
        .from("users") // Changed from user_profiles to users
        .update({
          first_name: firstName,
          last_name: lastName,
          phone,
          updated_at: new Date(),
        })
        .eq("id", req.user.id)
        .single();

      if (error) throw new AppError(error.message, 400);

      return ApiResponse.success(res, data, "Profile updated successfully");
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  }
}

================
File: src/controllers/claims.controller.ts
================
import { Request, Response } from "express";
import { PrismaClient } from "@prisma/client";
import { asyncHandler } from "../middleware/asyncHandler";

const prisma = new PrismaClient();

// Get all claims with pagination
export const getClaims = asyncHandler(async (req: Request, res: Response) => {
  const page = parseInt(req.query.page as string) || 1;
  const limit = parseInt(req.query.limit as string) || 10;
  const skip = (page - 1) * limit;

  const [claims, total] = await Promise.all([
    prisma.claim.findMany({
      skip,
      take: limit,
      include: {
        vehicleInfo: true,
        assignedTo: {
          select: {
            id: true,
            name: true,
            email: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    }),
    prisma.claim.count(),
  ]);

  res.json({
    success: true,
    data: claims,
    pagination: {
      total,
      page,
      pages: Math.ceil(total / limit),
      limit,
    },
  });
});

// Get single claim
export const getClaim = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const claim = await prisma.claim.findUnique({
    where: { id },
    include: {
      vehicleInfo: true,
      parts: true,
      documents: true,
      assignedTo: {
        select: {
          id: true,
          name: true,
          email: true,
        },
      },
    },
  });

  if (!claim) {
    return res.status(404).json({
      success: false,
      error: "Claim not found",
    });
  }

  res.json({
    success: true,
    data: claim,
  });
});

// Create new claim
export const createClaim = asyncHandler(async (req: Request, res: Response) => {
  const { vehicleInfo, ...claimData } = req.body;

  const claim = await prisma.claim.create({
    data: {
      ...claimData,
      vehicleInfo: {
        create: vehicleInfo,
      },
    },
    include: {
      vehicleInfo: true,
    },
  });

  res.status(201).json({
    success: true,
    data: claim,
  });
});

// Update claim
export const updateClaim = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const { vehicleInfo, ...claimData } = req.body;

  const claim = await prisma.claim.update({
    where: { id },
    data: {
      ...claimData,
      vehicleInfo: vehicleInfo
        ? {
            update: vehicleInfo,
          }
        : undefined,
    },
    include: {
      vehicleInfo: true,
      parts: true,
      documents: true,
    },
  });

  res.json({
    success: true,
    data: claim,
  });
});

// Delete claim
export const deleteClaim = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  await prisma.claim.delete({
    where: { id },
  });

  res.json({
    success: true,
    data: {},
  });
});

// Add part to claim
export const addPartToClaim = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const partData = req.body;

    const part = await prisma.part.create({
      data: {
        ...partData,
        claim: {
          connect: { id },
        },
      },
    });

    // Update claim total amount
    await prisma.claim.update({
      where: { id },
      data: {
        totalAmount: {
          increment: partData.quantity * partData.unitPrice,
        },
      },
    });

    res.status(201).json({
      success: true,
      data: part,
    });
  }
);

// Upload document
export const uploadDocument = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const { name, type, url } = req.body;

    const document = await prisma.document.create({
      data: {
        name,
        type,
        url,
        claim: {
          connect: { id },
        },
      },
    });

    res.status(201).json({
      success: true,
      data: document,
    });
  }
);

================
File: src/middleware/asyncHandler.ts
================
import { Request, Response, NextFunction, RequestHandler } from "express";

type AsyncRequestHandler = (
  req: Request,
  res: Response,
  next: NextFunction
) => Promise<any>;

export const asyncHandler =
  (fn: AsyncRequestHandler): RequestHandler =>
  (req: Request, res: Response, next: NextFunction): void => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };

================
File: src/middleware/auth.ts
================
// src/middleware/auth.ts
import { Request, Response, NextFunction } from "express";
import { supabase, UserRole, ROLE_HIERARCHY } from "../config/supabase";
import { AppError } from "../utils/errors";
import { ApiResponse } from "../utils/apiResponse";

export interface AuthenticatedRequest extends Request {
  user?: any;
}

export const authenticate = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
      throw new AppError("No authentication token provided", 401);
    }

    const {
      data: { user },
      error,
    } = await supabase.auth.getUser(token);

    if (error || !user) {
      throw new AppError("Invalid or expired token", 401);
    }

    // Get user's role from user_profiles table
    const { data: profile, error: profileError } = await supabase
      .from("user_profiles")
      .select("*")
      .eq("id", user.id)
      .single();

    if (profileError || !profile) {
      throw new AppError("User profile not found", 404);
    }

    req.user = { ...user, ...profile };
    next();
  } catch (error) {
    return ApiResponse.error(res, error.message, error.statusCode || 500);
  }
};

export const authorize = (...allowedRoles: UserRole[]) => {
  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    try {
      if (!req.user || !req.user.role) {
        throw new AppError("User not authenticated", 401);
      }

      const userRoleLevel = ROLE_HIERARCHY[req.user.role];
      const hasPermission = allowedRoles.some(
        (role) => ROLE_HIERARCHY[role] <= userRoleLevel
      );

      if (!hasPermission) {
        throw new AppError("Insufficient permissions", 403);
      }

      next();
    } catch (error) {
      return ApiResponse.error(res, error.message, error.statusCode || 500);
    }
  };
};

================
File: src/middleware/docs.ts
================
// src/middleware/docs.ts
import { Express, Request, Response } from "express";
import swaggerUi from "swagger-ui-express";
import { specs } from "../config/swagger";

export const setupDocs = (app: Express) => {
  // Swagger documentation route
  app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(specs));

  // JSON version of documentation
  app.get("/api-docs.json", (req: Request, res: Response) => {
    res.setHeader("Content-Type", "application/json");
    res.send(specs);
  });
};

================
File: src/middleware/errorHandler.ts
================
// src/middleware/errorHandler.ts
import { Request, Response, NextFunction } from "express";
import * as Sentry from "@sentry/node";
import { config } from "../config/app";
import { AppError } from "../utils/errors";

export const errorHandler = (
  error: Error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  // Log error
  console.error(error);

  // Capture error in Sentry
  Sentry.captureException(error);

  // Check if error is operational
  if (error instanceof AppError) {
    return res.status(error.statusCode).json({
      status: error.status,
      message: error.message,
      ...(config.app.env === "development" && { stack: error.stack }),
    });
  }

  // Handle unexpected errors
  return res.status(500).json({
    status: "error",
    message: "Something went wrong!",
    ...(config.app.env === "development" && { stack: error.stack }),
    ...(res.sentry ? { sentryEventId: res.sentry } : {}),
  });
};

================
File: src/routes/auth.ts
================
// src/routes/auth.ts
import { Router } from "express";
import { AuthController } from "../controllers/auth.controller";
import { authenticate, authorize } from "../middleware/auth";
import { UserRole } from "../config/supabase";
import { asyncHandler } from "../middleware/asyncHandler";

const router = Router();

/**
 * @swagger
 * /auth/register:
 *   post:
 *     summary: Register a new user
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *               - firstName
 *               - lastName
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *               firstName:
 *                 type: string
 *               lastName:
 *                 type: string
 *               phone:
 *                 type: string
 *               role:
 *                 type: string
 *                 enum: [USER, CCA, CCM, ADMIN, SUDO]
 */
router.post(
  "/register",
  authenticate,
  authorize(UserRole.ADMIN, UserRole.SUDO),
  asyncHandler(AuthController.register)
);

/**
 * @swagger
 * /auth/login:
 *   post:
 *     summary: Login to the application
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 */
router.post("/login", asyncHandler(AuthController.login));

/**
 * @swagger
 * /auth/logout:
 *   post:
 *     summary: Logout from the application
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: []
 */
router.post("/logout", authenticate, asyncHandler(AuthController.logout));

/**
 * @swagger
 * /auth/profile:
 *   get:
 *     summary: Get user profile
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: []
 */
router.get("/profile", authenticate, asyncHandler(AuthController.getProfile));

/**
 * @swagger
 * /auth/profile:
 *   put:
 *     summary: Update user profile
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               firstName:
 *                 type: string
 *               lastName:
 *                 type: string
 *               phone:
 *                 type: string
 */
router.put(
  "/profile",
  authenticate,
  asyncHandler(AuthController.updateProfile)
);

export default router;

================
File: src/routes/claims.ts
================
import express from "express";
import {
  getClaims,
  getClaim,
  createClaim,
  updateClaim,
  deleteClaim,
  addPartToClaim,
  uploadDocument,
} from "../controllers/claims.controller";
import { authenticate } from "../middleware/auth";
import { asyncHandler } from "../middleware/asyncHandler";

const router = express.Router();

/**
 * @swagger
 * /api/claims:
 *   get:
 *     summary: Get all claims with pagination
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Number of items per page
 *     responses:
 *       200:
 *         description: List of claims
 */
router.get("/", authenticate, asyncHandler(getClaims));

/**
 * @swagger
 * /api/claims/{id}:
 *   get:
 *     summary: Get a single claim by ID
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Claim details
 *       404:
 *         description: Claim not found
 */
router.get("/:id", authenticate, asyncHandler(getClaim));

/**
 * @swagger
 * /api/claims:
 *   post:
 *     summary: Create a new claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - claimNumber
 *               - vehicleInfo
 *             properties:
 *               claimNumber:
 *                 type: string
 *               vehicleInfo:
 *                 type: object
 *     responses:
 *       201:
 *         description: Claim created successfully
 */
router.post("/", authenticate, asyncHandler(createClaim));

/**
 * @swagger
 * /api/claims/{id}:
 *   put:
 *     summary: Update a claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *     responses:
 *       200:
 *         description: Claim updated successfully
 *       404:
 *         description: Claim not found
 */
router.put("/:id", authenticate, asyncHandler(updateClaim));

/**
 * @swagger
 * /api/claims/{id}:
 *   delete:
 *     summary: Delete a claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Claim deleted successfully
 *       404:
 *         description: Claim not found
 */
router.delete("/:id", authenticate, asyncHandler(deleteClaim));

/**
 * @swagger
 * /api/claims/{id}/parts:
 *   post:
 *     summary: Add a part to a claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - partNumber
 *               - description
 *               - quantity
 *               - unitPrice
 *             properties:
 *               partNumber:
 *                 type: string
 *               description:
 *                 type: string
 *               quantity:
 *                 type: number
 *               unitPrice:
 *                 type: number
 *     responses:
 *       201:
 *         description: Part added successfully
 */
router.post("/:id/parts", authenticate, asyncHandler(addPartToClaim));

/**
 * @swagger
 * /api/claims/{id}/documents:
 *   post:
 *     summary: Upload a document to a claim
 *     tags: [Claims]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - type
 *               - url
 *             properties:
 *               name:
 *                 type: string
 *               type:
 *                 type: string
 *               url:
 *                 type: string
 *     responses:
 *       201:
 *         description: Document uploaded successfully
 */
router.post("/:id/documents", authenticate, asyncHandler(uploadDocument));

export default router;

================
File: src/scripts/seedDatabase.ts
================
// src/scripts/seedDatabase.ts
import { supabase } from "../config/supabase";
import { UserRole } from "../config/supabase";

async function seedDatabase() {
  try {
    // Check if SUDO user exists
    const {
      data,
      count,
      error: countError,
    } = await supabase
      .from("users")
      .select("*", { count: "exact" })
      .eq("role", UserRole.SUDO)
      .limit(1);

    if (countError) {
      throw countError;
    }

    if (count && count > 0) {
      console.log("SUDO user already exists");
      return;
    }

    // Create SUDO user
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: process.env.SUDO_EMAIL || "sudo@example.com",
      password: process.env.SUDO_PASSWORD || "StrongPassword123!",
      options: {
        data: {
          first_name: "Super",
          last_name: "Admin",
          role: UserRole.SUDO,
        },
      },
    });

    if (authError) {
      throw authError;
    }

    if (!authData.user) {
      throw new Error("No user data returned from auth signup");
    }

    // Create user record
    const { error: userError } = await supabase.from("users").insert([
      {
        id: authData.user.id,
        email: process.env.SUDO_EMAIL || "sudo@example.com",
        first_name: "Super",
        last_name: "Admin",
        role: UserRole.SUDO,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
    ]);

    if (userError) {
      throw userError;
    }

    console.log("✅ SUDO user created successfully");
  } catch (error) {
    console.error("❌ Error seeding database:", error);
    process.exit(1);
  }
}

// Run the seeding
seedDatabase().catch((error) => {
  console.error("Fatal error during database seeding:", error);
  process.exit(1);
});

================
File: src/types/api.ts
================
// src/types/api.ts
export interface ErrorResponse {
  error: string;
  details?: any;
}

export interface SuccessResponse<T> {
  data: T;
  message?: string;
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
}

================
File: src/types/auth.ts
================
// src/types/auth.ts

export enum UserRole {
  USER = "USER", // Web user
  CCA = "CCA", // Call Centre Agent
  CCM = "CCM", // Call Centre Manager
  ADMIN = "ADMIN", // Administrator
  SUDO = "SUDO", // Super Admin
}

export const ROLE_HIERARCHY = {
  [UserRole.SUDO]: 5,
  [UserRole.ADMIN]: 4,
  [UserRole.CCM]: 3,
  [UserRole.CCA]: 2,
  [UserRole.USER]: 1,
};

// Role permissions interface
export interface RolePermissions {
  canViewDashboard: boolean;
  canHandleCalls: boolean;
  canManageAgents: boolean;
  canViewReports: boolean;
  canManageUsers: boolean;
  canManageSystem: boolean;
}

// Default permissions for each role
export const ROLE_PERMISSIONS: Record<UserRole, RolePermissions> = {
  [UserRole.SUDO]: {
    canViewDashboard: true,
    canHandleCalls: true,
    canManageAgents: true,
    canViewReports: true,
    canManageUsers: true,
    canManageSystem: true,
  },
  [UserRole.ADMIN]: {
    canViewDashboard: true,
    canHandleCalls: true,
    canManageAgents: true,
    canViewReports: true,
    canManageUsers: true,
    canManageSystem: false,
  },
  [UserRole.CCM]: {
    canViewDashboard: true,
    canHandleCalls: true,
    canManageAgents: true,
    canViewReports: true,
    canManageUsers: false,
    canManageSystem: false,
  },
  [UserRole.CCA]: {
    canViewDashboard: true,
    canHandleCalls: true,
    canManageAgents: false,
    canViewReports: false,
    canManageUsers: false,
    canManageSystem: false,
  },
  [UserRole.USER]: {
    canViewDashboard: false,
    canHandleCalls: false,
    canManageAgents: false,
    canViewReports: false,
    canManageUsers: false,
    canManageSystem: false,
  },
};

// User interface
export interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: UserRole;
  phone?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

// Helper functions
export function hasPermission(
  role: UserRole,
  permission: keyof RolePermissions
): boolean {
  return ROLE_PERMISSIONS[role][permission];
}

export function isRoleHigherThan(role1: UserRole, role2: UserRole): boolean {
  return ROLE_HIERARCHY[role1] > ROLE_HIERARCHY[role2];
}

// Auth response types
export interface AuthResponse {
  user: User | null;
  session: any | null;
  error?: string;
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface RegisterData extends LoginCredentials {
  firstName: string;
  lastName: string;
  phone?: string;
  role?: UserRole;
}

================
File: src/utils/apiResponse.ts
================
// src/utils/apiResponse.ts
import { Response } from "express";
import {
  SuccessResponse,
  ErrorResponse,
  PaginatedResponse,
} from "../types/api";

export class ApiResponse {
  static success<T>(
    res: Response,
    data: T,
    message?: string,
    statusCode = 200
  ): Response {
    const response: SuccessResponse<T> = {
      data,
      message,
    };
    return res.status(statusCode).json(response);
  }

  static error(
    res: Response,
    error: string,
    statusCode = 500,
    details?: any
  ): Response {
    const response: ErrorResponse = {
      error,
      details,
    };
    return res.status(statusCode).json(response);
  }

  static paginated<T>(
    res: Response,
    data: T[],
    total: number,
    page: number,
    limit: number
  ): Response {
    const response: PaginatedResponse<T> = {
      data,
      total,
      page,
      limit,
    };
    return res.status(200).json(response);
  }
}

================
File: src/utils/errors.ts
================
// src/utils/errors.ts
export class AppError extends Error {
  statusCode: number;
  status: string;
  isOperational: boolean;

  constructor(message: string, statusCode: number) {
    super(message);
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith("4") ? "fail" : "error";
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

================
File: src/index.ts
================
// src/index.ts
import "./instrument"; // Must be first import
import * as Sentry from "@sentry/node";
import express from "express";
import cors from "cors";
import helmet from "helmet";
import { config } from "./config/app";
import { setupDocs } from "./middleware/docs";
import authRoutes from "./routes/auth";

const app = express();

// Basic middleware
app.use(cors());
app.use(helmet());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Setup API documentation
setupDocs(app);

// Routes
app.use("/auth", authRoutes);

// Basic health check route
app.get("/health", (req, res) => {
  res.json({
    status: "ok",
    timestamp: new Date(),
    environment: config.app.env,
  });
});

// Test Sentry
app.get("/debug-sentry", function mainHandler(req, res) {
  throw new Error("My first Sentry error!");
});

// The error handler must be registered before any other error middleware and after all controllers
Sentry.setupExpressErrorHandler(app);

// Optional fallthrough error handler
app.use(function onError(
  err: Error,
  req: express.Request,
  res: express.Response,
  next: express.NextFunction
) {
  // The error id is attached to res.sentry to be returned
  res.statusCode = 500;
  res.end(res.sentry + "\n");
});

// Start server
const server = app.listen(config.app.port, () => {
  console.log(
    `🚀 Server running on port ${config.app.port} in ${config.app.env} mode`
  );
});

export default server;

================
File: src/instrument.ts
================
import { dotenv } from "dotenv";
// src/instrument.ts
import * as Sentry from "@sentry/node";
import { nodeProfilingIntegration } from "@sentry/profiling-node";

Sentry.init({
  dsn: process.env.SENTRY_DSN, // Replace with your actual DSN
  integrations: [nodeProfilingIntegration()],
  // Performance Monitoring
  tracesSampleRate: 1.0,
});

// Optional: Start profiler
Sentry.profiler.startProfiler();

// Optional: Create a test transaction
Sentry.startSpan(
  {
    name: "Application Startup",
  },
  () => {
    // Application startup logic here
  }
);

export { Sentry };

================
File: .gitignore
================
# Dependencies
node_modules/

# Build
dist/

# Environment
.env
.env.*

# Logs
logs/
*.log

# IDE
.vscode/
.idea/

# Misc
.DS_Store

================
File: package.json
================
{
  "name": "cms-backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate deploy",
    "lint": "eslint . --ext .ts",
    "format": "prettier --write \"src/**/*.ts\"",
    "seed": "ts-node src/scripts/seedDatabase.ts"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@prisma/client": "^6.1.0",
    "@sentry/node": "^8.47.0",
    "@sentry/profiling-node": "^8.47.0",
    "@sentry/tracing": "^7.114.0",
    "@supabase/supabase-js": "^2.47.10",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "helmet": "^8.0.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/node": "^22.10.2",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.7",
    "@typescript-eslint/eslint-plugin": "^8.18.1",
    "@typescript-eslint/parser": "^8.18.1",
    "prettier": "^3.4.2",
    "prisma": "^6.1.0",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.7.2"
  }
}

================
File: README.md
================
# CMS Backend

Backend service for the Claims Management System built with Express.js, Prisma, and Supabase.

## Project Structure

## Setup

## Prerequisites

Before you begin, ensure you have:

- Node.js 18.x or higher installed
- A Supabase project created
- A Sentry account for error tracking
- Access to environment variables

## Setup Instructions

1. **Clone the repository**

   ```bash
   git clone <repository-url>
   cd cms-backend

   ```

2.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es2017",
    "module": "commonjs",
    "lib": ["es2017", "esnext.asynciterable"],
    "typeRoots": ["./node_modules/@types", "./src/types"],
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },
    "esModuleInterop": true,
    "strict": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}

================
File: cms-backend/package.json
================
{
  "name": "cms-backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate deploy",
    "lint": "eslint . --ext .ts",
    "format": "prettier --write \"src/**/*.ts\"",
    "seed": "ts-node prisma/seed.ts",
    "prisma:seed": "prisma db seed",
    "create:sudo": "ts-node src/scripts/createSudoUser.ts"
  },
  "prisma": {
    "seed": "node prisma/seed.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@prisma/client": "^6.1.0",
    "@sentry/node": "^8.47.0",
    "@sentry/profiling-node": "^8.47.0",
    "@sentry/tracing": "^7.114.0",
    "@supabase/supabase-js": "^2.47.10",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "helmet": "^8.0.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/node": "^22.10.2",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.7",
    "@typescript-eslint/eslint-plugin": "^8.18.1",
    "@typescript-eslint/parser": "^8.18.1",
    "prettier": "^3.4.2",
    "prisma": "^6.1.0",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.7.2"
  }
}

================
File: cms-backend/README.md
================
# CMS Backend

Backend service for the Claims Management System built with Express.js, Prisma, and Supabase.

## Project Structure

## Setup

## Prerequisites

Before you begin, ensure you have:

- Node.js 18.x or higher installed
- A Supabase project created
- A Sentry account for error tracking
- Access to environment variables

## Setup Instructions

1. **Clone the repository**

   ```bash
   git clone <repository-url>
   cd cms-backend

   ```

2.

================
File: cms-backend/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es2017",
    "module": "commonjs",
    "lib": ["es2017", "esnext.asynciterable"],
    "typeRoots": ["./node_modules/@types", "./src/types"],
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },
    "esModuleInterop": true,
    "strict": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/claims/modals/UploadModal.tsx
================
import { useState, useCallback } from "react";
import { Upload } from "lucide-react";
import { useDropzone } from "react-dropzone";

interface UploadModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (file: File, category: string) => void;
}

export const UploadModal = ({
  isOpen,
  onClose,
  onUpload,
}: UploadModalProps) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [category, setCategory] = useState("Insurance Documents");

  const onDrop = useCallback((acceptedFiles: File[]) => {
    setSelectedFile(acceptedFiles[0]);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <h2 className="text-lg font-medium mb-4">Upload File</h2>

        <div
          {...getRootProps()}
          className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer"
        >
          <input {...getInputProps()} />
          <Upload className="h-10 w-10 text-gray-400 mx-auto mb-4" />
          {isDragActive ? (
            <p>Drop the file here</p>
          ) : (
            <div>
              <p className="text-gray-600">Drag and drop your file here or</p>
              <p className="text-blue-600">browse files</p>
            </div>
          )}
        </div>

        {selectedFile && (
          <div className="mt-4 p-2 bg-gray-50 rounded">
            <p className="text-sm">{selectedFile.name}</p>
          </div>
        )}

        <div className="mt-4">
          <label className="block text-sm font-medium text-gray-700">
            Category
          </label>
          <select
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            className="mt-1 block w-full border rounded-md px-3 py-2"
          >
            <option>Insurance Documents</option>
            <option>Evidence Photos</option>
            <option>Repair Estimates</option>
            <option>Other Documents</option>
          </select>
        </div>

        <div className="mt-6 flex justify-end gap-3">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            Cancel
          </button>
          <button
            onClick={() => selectedFile && onUpload(selectedFile, category)}
            disabled={!selectedFile}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            Upload
          </button>
        </div>
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/ActionButtons.tsx
================
interface ActionButtonsProps {
  activeForm: "nags" | "custom" | "labor" | "deductible" | "rebate" | null;
  onFormChange: (
    form: "nags" | "custom" | "labor" | "deductible" | "rebate" | null
  ) => void;
}

export const ActionButtons = ({
  activeForm,
  onFormChange,
}: ActionButtonsProps) => {
  const buttons = [
    { id: "nags", label: "Add from NAGS", icon: "+" },
    { id: "custom", label: "Add Custom Part", icon: "+" },
    { id: "labor", label: "Add Labor", icon: "🔧" },
    { id: "deductible", label: "Add Deductible Buyback", icon: "$" },
    { id: "rebate", label: "Add Rebate", icon: "↩️" },
  ] as const;

  return (
    <div className="bg-white rounded-lg shadow-sm p-4">
      <div className="flex gap-4">
        {buttons.map((button) => (
          <button
            key={button.id}
            onClick={() => onFormChange(button.id)}
            className={`
                 flex items-center gap-2 px-4 py-2 rounded-lg
                 ${
                   activeForm === button.id
                     ? "bg-blue-600 text-white"
                     : "bg-gray-50 hover:bg-gray-100"
                 }
               `}
          >
            <span>{button.icon}</span>
            {button.label}
          </button>
        ))}
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/FinancialSummary.tsx
================
// src/components/claims/tabs/parts/FinancialSummary.tsx
export const FinancialSummary = () => {
  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h3 className="text-lg font-medium mb-4">Financial Summary</h3>
      <div className="space-y-3">
        <div className="flex justify-between">
          <span>Subtotal</span>
          <span>$0.00</span>
        </div>
        <div className="flex justify-between">
          <span>Tax (13%)</span>
          <span>$0.00</span>
        </div>
        <div className="flex justify-between font-medium">
          <span>Total</span>
          <span>$0.00</span>
        </div>
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/PartEntryForm.tsx
================
// src/components/claims/tabs/parts/PartEntryForm.tsx
interface PartEntryFormProps {
  formType: "nags" | "custom" | "labor" | "deductible" | "rebate";
  onClose: () => void;
  onSubmit: (data: any) => void;
}

export const PartEntryForm = ({
  formType,
  onClose,
  onSubmit,
}: PartEntryFormProps) => {
  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium">
          {formType === "nags" && "Add from NAGS"}
          {formType === "custom" && "Add Custom Part"}
          {formType === "labor" && "Add Labor"}
          {formType === "deductible" && "Add Deductible Buyback"}
          {formType === "rebate" && "Add Rebate"}
        </h3>
        <button onClick={onClose} className="text-gray-400 hover:text-gray-500">
          ×
        </button>
      </div>

      {/* Placeholder form fields - customize based on formType */}
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Description
          </label>
          <input
            type="text"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Price
          </label>
          <input
            type="number"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
      </div>

      <div className="flex justify-end gap-3 pt-4">
        <button
          onClick={onClose}
          className="px-4 py-2 text-gray-700 hover:text-gray-900"
        >
          Cancel
        </button>
        <button
          onClick={() => onSubmit({ description: "", price: 0 })}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          Add
        </button>
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/PartsTab.tsx
================
// src/components/claims/tabs/parts/PartsTab.tsx
import { useState } from "react";
import { ShopInvoice } from "./ShopInvoice";
import { PartsTable } from "./PartsTable";
import { PartEntryForm } from "./PartEntryForm";
import { FinancialSummary } from "./FinancialSummary";

export const PartsTab = () => {
  const [activeForm, setActiveForm] = useState<
    "nags" | "custom" | "labor" | "deductible" | "rebate" | null
  >(null);

  const buttonConfigs = [
    {
      id: "nags",
      label: "Add from NAGS",
      icon: "+",
      colorClass: "bg-blue-600 text-white hover:bg-blue-700",
    },
    {
      id: "custom",
      label: "Add Custom Part",
      icon: "+",
      colorClass: "bg-gray-100 hover:bg-gray-200",
    },
    {
      id: "labor",
      label: "Add Labor",
      icon: "🔧",
      colorClass: "bg-gray-100 hover:bg-gray-200",
    },
    {
      id: "deductible",
      label: "Add Deductible Buyback",
      icon: "$",
      colorClass: "bg-gray-100 hover:bg-gray-200",
    },
    {
      id: "rebate",
      label: "Add Rebate",
      icon: "↩️",
      colorClass: "bg-gray-100 hover:bg-gray-200",
    },
  ] as const;

  return (
    <div className="flex gap-6">
      {/* Main Content - Left Side */}
      <div className="flex-grow space-y-6">
        {/* Action Buttons Container */}
        <div className="bg-white p-4 rounded-lg shadow">
          <div className="flex gap-4">
            {buttonConfigs.map((button) => (
              <button
                key={button.id}
                onClick={() => setActiveForm(button.id)}
                className={`
                  flex items-center gap-2 px-4 py-2 rounded-lg 
                  ${
                    activeForm === button.id
                      ? "bg-blue-600 text-white"
                      : button.colorClass
                  }
                  transition-colors duration-150
                `}
              >
                <span>{button.icon}</span>
                {button.label}
              </button>
            ))}
          </div>
        </div>

        {/* Form Container */}
        {activeForm && (
          <div className="bg-white p-6 rounded-lg shadow">
            <PartEntryForm
              formType={activeForm}
              onClose={() => setActiveForm(null)}
              onSubmit={(data) => {
                console.log("Form submitted:", data);
                setActiveForm(null);
              }}
            />
          </div>
        )}

        {/* Parts Table */}
        <PartsTable />

        {/* Financial Summary */}
        <FinancialSummary />
      </div>

      {/* Shop Invoice - Right Side */}
      <div className="w-96">
        <ShopInvoice />
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/PartsTable.tsx
================
// src/components/claims/tabs/parts/PartsTable.tsx
export const PartsTable = () => {
  return (
    <div className="bg-white rounded-lg shadow">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
              Part Number
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
              Description
            </th>
            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
              List Price
            </th>
            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
              Shop Price
            </th>
            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
              Carrier Price
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          <tr>
            <td className="px-6 py-4 text-sm text-gray-500" colSpan={5}>
              No parts added yet
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/ShopInvoice.tsx
================
// src/components/claims/tabs/parts/ShopInvoice.tsx
import { useState } from "react";
import { ShopInvoiceUpload } from "./ShopInvoiceUpload";

export const ShopInvoice = () => {
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [formData, setFormData] = useState({
    number: "",
    date: "",
    shopAmount: "",
    preTaxAmount: "",
    shopAdminFee: {
      percentage: "",
      amount: "",
    },
    shopAdminFeeTax: "",
    deductible: "",
    total: "",
    shopAmountFinal: "",
    variance: "",
  });

  const handleUpload = (file: File) => {
    console.log("Uploaded shop invoice:", file);
    setIsUploadModalOpen(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h3 className="text-lg font-medium mb-4">Shop Invoice</h3>

      <div className="space-y-4">
        {/* Invoice Number */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Number
          </label>
          <input
            type="text"
            name="number"
            value={formData.number}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>

        {/* Date */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Date
          </label>
          <input
            type="date"
            name="date"
            value={formData.date}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            placeholder="yyyy-mm-dd"
          />
        </div>

        {/* Shop Amount */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Shop Amount
          </label>
          <input
            type="number"
            name="shopAmount"
            value={formData.shopAmount}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Pre Tax Amount */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Pre Tax Amount
          </label>
          <input
            type="number"
            name="preTaxAmount"
            value={formData.preTaxAmount}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Shop Admin Fee */}
        <div className="flex gap-2">
          <div className="w-1/3">
            <label className="block text-sm font-medium text-gray-700">%</label>
            <input
              type="number"
              name="shopAdminFee.percentage"
              value={formData.shopAdminFee.percentage}
              onChange={handleInputChange}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              step="0.01"
            />
          </div>
          <div className="w-2/3">
            <label className="block text-sm font-medium text-gray-700">$</label>
            <input
              type="number"
              name="shopAdminFee.amount"
              value={formData.shopAdminFee.amount}
              onChange={handleInputChange}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              step="0.01"
            />
          </div>
        </div>

        {/* Shop Admin Fee Tax */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Shop Admin Fee Tax
          </label>
          <input
            type="number"
            name="shopAdminFeeTax"
            value={formData.shopAdminFeeTax}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Deductible */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Deductible
          </label>
          <input
            type="number"
            name="deductible"
            value={formData.deductible}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Total */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Total
          </label>
          <input
            type="number"
            name="total"
            value={formData.total}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
            readOnly
          />
        </div>

        {/* Shop Amount */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Shop Amount
          </label>
          <input
            type="number"
            name="shopAmountFinal"
            value={formData.shopAmountFinal}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Variance */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Variance
          </label>
          <input
            type="number"
            name="variance"
            value={formData.variance}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
            readOnly
          />
        </div>

        {/* Upload Section */}
        <div
          onClick={() => setIsUploadModalOpen(true)}
          className="mt-6 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400"
        >
          <div className="text-gray-600">
            <p>Drop files here or click to upload</p>
            <p className="text-sm">
              To be able to audit the invoice, please complete the above.
            </p>
          </div>
        </div>

        {/* Calculate Button */}
        <button className="w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
          Calculate
        </button>
      </div>

      <ShopInvoiceUpload
        isOpen={isUploadModalOpen}
        onClose={() => setIsUploadModalOpen(false)}
        onUpload={handleUpload}
      />
    </div>
  );
};

================
File: src/components/claims/tabs/parts/ShopInvoiceUpload.tsx
================
// src/components/claims/tabs/parts/ShopInvoiceUpload.tsx
import { UploadModal } from "../../modals/UploadModal";

interface ShopInvoiceUploadProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (file: File) => void;
}

export const ShopInvoiceUpload = ({
  isOpen,
  onClose,
  onUpload,
}: ShopInvoiceUploadProps) => {
  return (
    <UploadModal
      isOpen={isOpen}
      onClose={onClose}
      onUpload={(file) => onUpload(file)}
    />
  );
};

================
File: src/components/claims/tabs/AnnexesTab.tsx
================
// src/components/claims/tabs/AnnexesTab.tsx
import { useState } from "react";
import { Upload, Eye, File, Image } from "lucide-react";
import { UploadModal } from "../modals/UploadModal";

interface FileItem {
  id: string;
  name: string;
  category: string;
  type: "pdf" | "image";
}

export const AnnexesTab = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [files, setFiles] = useState<FileItem[]>([
    {
      id: "1",
      name: "Insurance_Report.pdf",
      category: "Insurance Documents",
      type: "pdf",
    },
    {
      id: "2",
      name: "Damage_Photo.jpg",
      category: "Evidence Photos",
      type: "image",
    },
  ]);

  const handleUpload = (file: File, category: string) => {
    // Handle file upload logic here
    const newFile: FileItem = {
      id: Date.now().toString(),
      name: file.name,
      category,
      type: file.type.includes("pdf") ? "pdf" : "image",
    };
    setFiles([...files, newFile]);
    setIsModalOpen(false);
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-lg font-medium">Uploaded Files</h2>
        <button
          onClick={() => setIsModalOpen(true)}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
        >
          <Upload className="h-4 w-4" />
          Upload File
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-sm">
        <table className="min-w-full divide-y divide-gray-200">
          <tbody className="divide-y divide-gray-200">
            {files.map((file) => (
              <tr key={file.id}>
                <td className="py-4 px-6 whitespace-nowrap">
                  <div className="flex items-center">
                    {file.type === "pdf" ? (
                      <File className="h-8 w-8 text-red-500" />
                    ) : (
                      <Image className="h-8 w-8 text-blue-500" />
                    )}
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">
                        {file.name}
                      </div>
                      <div className="text-sm text-gray-500">
                        {file.category}
                      </div>
                    </div>
                  </div>
                </td>
                <td className="py-4 px-6 whitespace-nowrap text-right">
                  <button className="text-gray-400 hover:text-gray-600">
                    <Eye className="h-5 w-5" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <UploadModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onUpload={handleUpload}
      />
    </div>
  );
};

================
File: src/components/claims/tabs/ClaimInfoTab copy.tsx
================
import { useForm } from "react-hook-form";
import { useEffect, useState } from "react";
import { AddressAutocomplete } from "../../common/AddressAutocomplete";
import { useInsurers } from "../../../hooks/useInsurers";

interface ClaimFormData {
  firstName: string;
  lastName: string;
  address1: string;
  address2: string;
  city: string;
  province: string;
  postalCode: string;
  email: string;
  homeTel: string;
  businessTel: string;
  driversLicense: string;
  insurerId: string;
  insurerAuthNumber: string;
}

export const ClaimInfoTab = () => {
  const { register, control, setValue } = useForm<ClaimFormData>();
  const { data: insurers, isLoading: isLoadingInsurers } = useInsurers();
  const [isGoogleLoaded, setIsGoogleLoaded] = useState(false);

  useEffect(() => {
    if (
      window.google ||
      document.querySelector('script[src*="maps.googleapis.com"]')
    ) {
      setIsGoogleLoaded(true);
      return;
    }

    const apiKey = import.meta.env.VITE_GOOGLE_MAPS_KEY;
    if (!apiKey) {
      console.error("Google Maps API key is not defined");
      return;
    }

    const script = document.createElement("script");
    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;
    script.async = true;
    script.defer = true;
    script.onload = () => setIsGoogleLoaded(true);
    document.head.appendChild(script);

    return () => {
      const scriptTag = document.querySelector(
        'script[src*="maps.googleapis.com"]'
      );
      if (scriptTag) {
        scriptTag.remove();
      }
    };
  }, []);

  if (isLoadingInsurers) {
    return <div>Loading insurers...</div>;
  }

  const insurersList = Array.isArray(insurers) ? insurers : [];

  // Your existing JSX remains the same, just update the insurers mapping:
  return (
    <div className="space-y-6">
      {/* ... other parts of your form ... */}

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Insurer's Name
        </label>
        <select
          {...register("insurerId")}
          className="mt-1 block w-full border rounded-md px-3 py-2"
          disabled={isLoadingInsurers}
        >
          <option value="">Select Insurer</option>
          {insurersList.map((insurer) => (
            <option key={insurer.id} value={insurer.id}>
              {insurer.name} {insurer.code ? `(${insurer.code})` : ""}
            </option>
          ))}
        </select>
      </div>

      {isGoogleLoaded && (
        <AddressAutocomplete control={control} setValue={setValue} />
      )}

      {/* ... rest of your form ... */}
    </div>
  );
};

================
File: src/components/claims/tabs/ClaimInfoTab.tsx
================
// src/components/claims/tabs/ClaimInfoTab.tsx
import { useForm } from "react-hook-form";
import { useEffect } from "react";
import { AddressAutocomplete } from "../../common/AddressAutocomplete";
import { useInsurers } from "../../../hooks/useInsurers";

export interface ClaimFormData {
  firstName: string;
  lastName: string;
  address1: string;
  address2: string;
  city: string;
  province: string;
  postalCode: string;
  email: string;
  homeTel: string;
  businessTel: string;
  driversLicense: string;
  insurerId: string;
  insurerAuthNumber: string;
}

export const ClaimInfoTab = () => {
  const { register, control, setValue, handleSubmit } =
    useForm<ClaimFormData>();
  const {
    data: insurers,
    isLoading: isLoadingInsurers,
    error: insurersError,
  } = useInsurers();

  const onSubmit = (data: ClaimFormData) => {
    console.log("Form submitted:", data);
    // Here you would typically send the data to your backend
  };

  // Load Google Maps API
  useEffect(() => {
    if (!window.google) {
      const loadGoogleMapsScript = () => {
        const apiKey = import.meta.env.VITE_GOOGLE_MAPS_KEY;
        if (!apiKey) {
          console.error(
            "Google Maps API key is not defined in environment variables"
          );
          return;
        }

        if (
          !document.querySelector(
            'script[src^="https://maps.googleapis.com/maps/api/js"]'
          )
        ) {
          const script = document.createElement("script");
          script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;
          script.async = true;
          script.defer = true;
          document.head.appendChild(script);
        }
      };

      loadGoogleMapsScript();
    }
  }, []);

  if (isLoadingInsurers) {
    return <div>Loading insurers...</div>;
  }

  if (insurersError) {
    return (
      <div>Error loading insurers: {(insurersError as Error).message}</div>
    );
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* First Row: Carrier/Insurer and Shop Information */}
      <div className="grid grid-cols-2 gap-6">
        {/* Carrier/Insurer Information */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">
            Carrier/Insurer Information
          </h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Insurer's Name
              </label>
              <select
                {...register("insurerId")}
                className="mt-1 block w-full border rounded-md px-3 py-2"
                disabled={isLoadingInsurers}
              >
                <option value="">Select Insurer</option>
                {Array.isArray(insurers) &&
                  insurers.map((insurer) => (
                    <option key={insurer.id} value={insurer.id}>
                      {insurer.name} {insurer.code ? `(${insurer.code})` : ""}
                    </option>
                  ))}
              </select>
              {!Array.isArray(insurers) && (
                <p className="text-red-500 text-sm mt-1">
                  Error loading insurers
                </p>
              )}
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Insurer Auth #
                </label>
                <input
                  {...register("insurerAuthNumber")}
                  type="text"
                  className="mt-1 block w-full border rounded-md px-3 py-2"
                />
              </div>
              <div className="flex items-center mt-6">
                <input type="checkbox" className="mr-2" />
                <label className="text-sm text-gray-700">
                  Talked to Insured
                </label>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Replacement Cost
                </label>
                <select className="mt-1 block w-full border rounded-md px-3 py-2">
                  <option>Select type</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Claim Initiated By
                </label>
                <select className="mt-1 block w-full border rounded-md px-3 py-2">
                  <option>Select initiator</option>
                </select>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Policy #
                </label>
                <input
                  type="text"
                  className="mt-1 block w-full border rounded-md px-3 py-2"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Claim #
                </label>
                <input
                  type="text"
                  className="mt-1 block w-full border rounded-md px-3 py-2"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Deductible
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Authorization Notes
              </label>
              <textarea className="mt-1 block w-full border rounded-md px-3 py-2 h-24" />
            </div>
          </div>
        </div>

        {/* Shop Information */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-medium">Shop Information</h2>
            <button className="text-blue-600 hover:text-blue-700">
              <span className="sr-only">Search</span>
              🔍
            </button>
          </div>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Shop Name
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Address
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Contact #
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Second Row: Customer and Vehicle Information */}
      <div className="grid grid-cols-2 gap-6">
        {/* Customer Information */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">Customer Information</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                First Name
              </label>
              <input
                {...register("firstName")}
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Last Name
              </label>
              <input
                {...register("lastName")}
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              Address 1
            </label>
            <AddressAutocomplete control={control} setValue={setValue} />
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              Address 2
            </label>
            <input
              {...register("address2")}
              type="text"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            />
          </div>
          <div className="grid grid-cols-3 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                City
              </label>
              <input
                {...register("city")}
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Province
              </label>
              <select
                {...register("province")}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="">Select province</option>
                <option value="AB">Alberta</option>
                <option value="BC">British Columbia</option>
                <option value="MB">Manitoba</option>
                <option value="NB">New Brunswick</option>
                <option value="NL">Newfoundland and Labrador</option>
                <option value="NS">Nova Scotia</option>
                <option value="ON">Ontario</option>
                <option value="PE">Prince Edward Island</option>
                <option value="QC">Quebec</option>
                <option value="SK">Saskatchewan</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Postal Code
              </label>
              <input
                {...register("postalCode")}
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                type="email"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Home Tel #
              </label>
              <input
                type="tel"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              Business Tel #
            </label>
            <input
              type="tel"
              className="mt-1 block w-full border rounded-md px-3 py-2"
            />
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              Driver's License
            </label>
            <input
              type="text"
              className="mt-1 block w-full border rounded-md px-3 py-2"
            />
          </div>
        </div>

        {/* Vehicle Information */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">Vehicle Information</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Year
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Make
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Model
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Body Style
              </label>
              <select className="mt-1 block w-full border rounded-md px-3 py-2">
                <option>Select style</option>
              </select>
            </div>
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              VIN
            </label>
            <input
              type="text"
              className="mt-1 block w-full border rounded-md px-3 py-2"
            />
          </div>
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Plate #
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Color
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Odometer
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                License Province
              </label>
              <select className="mt-1 block w-full border rounded-md px-3 py-2">
                <option>Select province</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Third Row: Work Order Memo and Internal Notes */}
      <div className="grid grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">Work Order Memo</h2>
          <textarea className="w-full h-32 border rounded-md px-3 py-2" />
        </div>
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">Internal Notes</h2>
          <textarea className="w-full h-32 border rounded-md px-3 py-2" />
        </div>
      </div>

      {/* Submit Button */}
      <div className="flex justify-end">
        <button
          type="submit"
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          Submit Claim
        </button>
      </div>
    </form>
  );
};

================
File: src/components/claims/ClaimsTable.tsx
================
// src/components/claims/ClaimsTable.tsx
import { StatusBadge } from "./StatusBadge";

export const ClaimsTable = () => {
  return (
    <div className="bg-white rounded-lg shadow">
      <table className="min-w-full">
        <thead>
          <tr className="border-b">
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Claim ID
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Deductible
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Shop Name
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Last Name
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              First Name
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Contact
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Status
            </th>
          </tr>
        </thead>
        <tbody>
          {/* Your table rows here */}
          <tr>
            <td className="px-6 py-4">#CL-2025001</td>
            <td className="px-6 py-4">$500</td>
            <td className="px-6 py-4">AutoFix Pro</td>
            <td className="px-6 py-4">Smith</td>
            <td className="px-6 py-4">John</td>
            <td className="px-6 py-4">+1 234-567-8900</td>
            <td className="px-6 py-4">
              <StatusBadge status="open" />
            </td>
          </tr>
          {/* More rows... */}
        </tbody>
      </table>
    </div>
  );
};

================
File: src/components/claims/FilterBar.tsx
================
// src/components/claims/FilterBar.tsx
interface FilterBarProps {
  statusFilter: string;
  onStatusChange: (value: string) => void;
  onSearchChange: (value: string) => void;
}

export const FilterBar = ({
  statusFilter,
  onStatusChange,
  onSearchChange,
}: FilterBarProps) => {
  return (
    <div className="flex gap-4 bg-white p-4 rounded-lg shadow-sm">
      <select
        value={statusFilter}
        onChange={(e) => onStatusChange(e.target.value)}
        className="border rounded-md py-2 px-3"
      >
        <option value="all">All Status</option>
        <option value="open">Open</option>
        <option value="assessing">Assessing</option>
        <option value="closed">Closed</option>
      </select>

      <input
        type="text"
        placeholder="Search claims..."
        onChange={(e) => onSearchChange(e.target.value)}
        className="border rounded-md py-2 px-3"
      />
    </div>
  );
};

================
File: src/components/claims/NewClaimForm.tsx
================
// src/components/claims/NewClaimForm.tsx
import { Link, useLocation, Outlet } from "react-router-dom";
import { ArrowLeft } from "lucide-react";

export const NewClaimForm = () => {
  const location = useLocation();
  const currentTab = location.pathname.split("/").pop();

  const tabs = [
    { id: "claim-info", label: "Claim Info" },
    { id: "parts", label: "Parts" },
    { id: "annexes", label: "Annexes" },
  ];

  return (
    <div className="space-y-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link
            to="/"
            className="flex items-center gap-2 text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="h-5 w-5" />
            Back to Dashboard
          </Link>
          <h1 className="text-2xl font-semibold">New Claim</h1>
        </div>
        <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          Save Claim
        </button>
      </div>

      {/* Tabs Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {tabs.map((tab) => (
            <Link
              key={tab.id}
              to={`/claims/new/${tab.id}`}
              className={`
                py-4 px-1 border-b-2 font-medium text-lg
                ${
                  currentTab === tab.id
                    ? "border-blue-500 text-blue-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }
              `}
            >
              {tab.label}
            </Link>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      <div className="mt-6">
        <Outlet />
      </div>
    </div>
  );
};

================
File: src/components/claims/StatusBadge.tsx
================
// src/components/claims/StatusBadge.tsx
interface StatusBadgeProps {
  status: "open" | "assessing" | "closed";
}

export const StatusBadge = ({ status }: StatusBadgeProps) => {
  const getStatusStyles = () => {
    switch (status) {
      case "open":
        return "bg-green-100 text-green-800";
      case "assessing":
        return "bg-yellow-100 text-yellow-800";
      case "closed":
        return "bg-gray-100 text-gray-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <span
      className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusStyles()}`}
    >
      {status.charAt(0).toUpperCase() + status.slice(1)}
    </span>
  );
};

================
File: src/components/common/AddressAutocomplete.tsx
================
import { useEffect, useRef, useState } from "react";
import { UseFormSetValue, Control, Controller } from "react-hook-form";
import type { ClaimFormData } from "../claims/tabs/ClaimInfoTab";

// Add type definitions for Google Maps API
declare global {
  interface Window {
    google: typeof google;
  }
}

interface AddressAutocompleteProps {
  control: Control<ClaimFormData>;
  setValue: UseFormSetValue<ClaimFormData>;
  disabled?: boolean;
}

export const AddressAutocomplete = ({
  control,
  setValue,
  disabled = false,
}: AddressAutocompleteProps) => {
  const autoCompleteRef = useRef<google.maps.places.Autocomplete | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const initializeAutocomplete = () => {
      if (!window.google || !inputRef.current) {
        setError("Google Maps API not loaded");
        return;
      }

      try {
        const options: google.maps.places.AutocompleteOptions = {
          componentRestrictions: { country: "ca" },
          fields: ["address_components", "formatted_address", "geometry"],
        };

        autoCompleteRef.current = new window.google.maps.places.Autocomplete(
          inputRef.current,
          options
        );

        autoCompleteRef.current.addListener("place_changed", () => {
          const place = autoCompleteRef.current?.getPlace();

          if (!place?.address_components) {
            setError("Invalid address selected");
            return;
          }

          const addressData = {
            street: "",
            city: "",
            province: "",
            postalCode: "",
          };

          place.address_components.forEach(
            (component: google.maps.GeocoderAddressComponent) => {
              const type = component.types[0];
              if (type === "street_number") {
                addressData.street = component.long_name;
              }
              if (type === "route") {
                addressData.street += " " + component.long_name;
              }
              if (type === "locality") {
                addressData.city = component.long_name;
              }
              if (type === "administrative_area_level_1") {
                addressData.province = component.short_name;
              }
              if (type === "postal_code") {
                addressData.postalCode = component.long_name;
              }
            }
          );

          setValue("address1", addressData.street.trim());
          setValue("city", addressData.city);
          setValue("province", addressData.province);
          setValue("postalCode", addressData.postalCode);
          setError(null);
        });
      } catch (err) {
        setError("Error initializing Google Maps Autocomplete");
        console.error("Error initializing Google Maps Autocomplete:", err);
      }
    };

    // Initialize autocomplete when the script is loaded
    if (window.google) {
      initializeAutocomplete();
    } else {
      // Add event listener for when the script loads
      const handleScriptLoad = () => {
        initializeAutocomplete();
      };
      window.addEventListener("google-maps-loaded", handleScriptLoad);
      return () => {
        window.removeEventListener("google-maps-loaded", handleScriptLoad);
      };
    }

    return () => {
      if (autoCompleteRef.current) {
        window.google.maps.event.clearInstanceListeners(
          autoCompleteRef.current
        );
      }
    };
  }, [setValue]);

  return (
    <div>
      <Controller
        name="address1"
        control={control}
        render={({ field }) => (
          <input
            {...field}
            ref={(e) => {
              inputRef.current = e;
              field.ref(e);
            }}
            type="text"
            className="mt-1 block w-full border rounded-md px-3 py-2"
            placeholder="Start typing to search address..."
            disabled={disabled}
          />
        )}
      />
      {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
    </div>
  );
};

================
File: src/components/layout/Header.tsx
================
// src/components/layout/Header.tsx
import { Search, Bell } from "lucide-react";

const Header = () => {
  return (
    <header className="h-16 bg-white border-b px-6 flex items-center justify-between">
      <div className="flex-1 max-w-xl">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Global Search..."
            className="w-full pl-10 pr-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
      <div className="flex items-center gap-4">
        <button className="p-2 hover:bg-gray-100 rounded-full">
          <Bell className="h-5 w-5 text-gray-500" />
        </button>
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
            <span className="text-sm font-medium">JD</span>
          </div>
          <span className="font-medium">John Doe</span>
        </div>
      </div>
    </header>
  );
};

export default Header;

================
File: src/components/layout/MainLayout.tsx
================
// src/components/layout/MainLayout.tsx
import { Search, Bell, Plus } from "lucide-react";
import { Link } from "react-router-dom";
import { Sidebar } from "./Sidebar";

interface MainLayoutProps {
  children: React.ReactNode;
}

export const MainLayout = ({ children }: MainLayoutProps) => {
  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar />
      <div className="flex-1 flex flex-col ml-64">
        <header className="h-16 bg-white border-b px-6 flex items-center justify-between sticky top-0">
          <div className="flex-1 max-w-xl">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="Global Search..."
                className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div className="flex items-center gap-6">
            <Link
              to="/claims/new"
              className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
            >
              <Plus className="h-4 w-4" />
              New Claim
            </Link>

            <button className="relative p-2 hover:bg-gray-50 rounded-full">
              <Bell className="h-5 w-5 text-gray-600" />
              <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
            </button>

            <div className="flex items-center gap-3">
              <div className="w-9 h-9 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center font-medium">
                JD
              </div>
              <div>
                <div className="text-sm font-medium text-gray-700">
                  John Doe
                </div>
                <div className="text-xs text-gray-500">Administrator</div>
              </div>
            </div>
          </div>
        </header>
        <main className="flex-1 overflow-auto p-6">{children}</main>
      </div>
    </div>
  );
};

================
File: src/components/layout/Sidebar.tsx
================
import { Link, useLocation } from "react-router-dom";
import {
  LayoutDashboard,
  FileText,
  Building2,
  Users,
  Settings,
  Search,
} from "lucide-react";

export const Sidebar = () => {
  const location = useLocation();

  return (
    <div className="w-64 bg-white border-r h-screen fixed left-0 top-0">
      <div className="p-6 border-b">
        <div className="flex items-center gap-2">
          <div className="grid grid-cols-2 gap-1">
            <div className="w-3 h-3 bg-blue-500 rounded-sm"></div>
            <div className="w-3 h-3 bg-blue-400 rounded-sm"></div>
            <div className="w-3 h-3 bg-blue-400 rounded-sm"></div>
            <div className="w-3 h-3 bg-blue-500 rounded-sm"></div>
          </div>
          <h1 className="text-xl font-bold text-gray-800">CCMS</h1>
        </div>
      </div>
      <nav className="p-4 space-y-2">
        <SidebarLink
          href="/"
          icon={<LayoutDashboard size={20} />}
          text="Dashboard"
          active={location.pathname === "/"}
        />
        <SidebarLink
          href="/reports"
          icon={<FileText size={20} />}
          text="Reports"
          active={location.pathname === "/reports"}
        />
        <SidebarLink
          href="/insurer"
          icon={<Building2 size={20} />}
          text="Insurer"
          active={location.pathname === "/insurer"}
        />
        <SidebarLink
          href="/customers"
          icon={<Users size={20} />}
          text="Customers"
          active={location.pathname === "/customers"}
        />
        <SidebarLink
          href="/settings"
          icon={<Settings size={20} />}
          text="Settings"
          active={location.pathname === "/settings"}
        />
      </nav>
    </div>
  );
};

interface SidebarLinkProps {
  href: string;
  icon: React.ReactNode;
  text: string;
  active?: boolean;
}

export const SidebarLink = ({ href, icon, text, active }: SidebarLinkProps) => {
  return (
    <Link
      to={href}
      className={`flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors
        ${
          active
            ? "bg-blue-50 text-blue-600"
            : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
        }`}
    >
      <span className="mr-3">{icon}</span>
      {text}
    </Link>
  );
};

================
File: src/hooks/useInsurers.ts
================
// src/hooks/useInsurers.ts
import { useQuery } from "@tanstack/react-query";
import axios from "axios";

interface Insurer {
  id: string;
  name: string;
  code: string | null;
}

export const useInsurers = () => {
  return useQuery<Insurer[]>({
    queryKey: ["insurers"],
    queryFn: async () => {
      const { data } = await axios.get("/api/insurers");
      return data;
    },
  });
};

================
File: src/lib/api.ts
================
import axios from "axios";

const baseURL = import.meta.env.VITE_API_URL || "http://localhost:5001";

export const api = axios.create({
  baseURL,
  headers: {
    "Content-Type": "application/json",
  },
});

export const getInsurers = async () => {
  const { data } = await api.get("/api/insurers");
  return Array.isArray(data) ? data : [];
};

================
File: src/pages/Dashboard.tsx
================
// src/pages/Dashboard.tsx
import { useState } from "react";
import { FilterBar } from "../components/claims/FilterBar";
import { ClaimsTable } from "../components/claims/ClaimsTable";

export const Dashboard = () => {
  const [statusFilter, setStatusFilter] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");

  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-semibold">Dashboard</h1>

      <FilterBar
        statusFilter={statusFilter}
        onStatusChange={setStatusFilter}
        onSearchChange={setSearchQuery}
      />

      <ClaimsTable />
    </div>
  );
};

================
File: src/server/routes/insurers.ts
================
import { Router } from "express";
import { prisma } from "../db";

const router = Router();

router.get("/", async (req, res) => {
  try {
    const insurers = await prisma.insurer.findMany({
      where: {
        isActive: true,
      },
      orderBy: {
        name: "asc",
      },
      select: {
        id: true,
        name: true,
        code: true,
      },
    });
    res.json(insurers);
  } catch (error) {
    console.error("Error fetching insurers:", error);
    res.status(500).json({ error: "Failed to fetch insurers" });
  }
});

export default router;

================
File: src/server/index.ts
================
import insurersRouter from "./routes/insurers";

// ... other imports and middleware ...

app.use("/api/insurers", insurersRouter);

================
File: src/types/google-maps.d.ts
================
declare global {
  interface Window {
    google: {
      maps: {
        places: {
          Autocomplete: new (
            input: HTMLInputElement,
            options?: google.maps.places.AutocompleteOptions
          ) => google.maps.places.Autocomplete;
        };
        event: {
          clearInstanceListeners: (instance: any) => void;
        };
      };
    };
  }
}

export {};

================
File: src/types/index.ts
================
export type ClaimStatus = "Open" | "Assessing" | "Closed";

export interface Claim {
  id: string;
  claimId: string;
  deductible: string;
  shopName: string;
  lastName: string;
  firstName: string;
  contact: string;
  status: ClaimStatus;
}

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.tsx
================
// src/App.tsx
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { MainLayout } from "./components/layout/MainLayout";
import { Dashboard } from "./pages/Dashboard";
import { NewClaimForm } from "./components/claims/NewClaimForm";
import { ClaimInfoTab } from "./components/claims/tabs/ClaimInfoTab";
import { PartsTab } from "./components/claims/tabs/parts/PartsTab";
import { AnnexesTab } from "./components/claims/tabs/AnnexesTab";
import { useEffect } from "react";

// Create a client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      refetchOnWindowFocus: false,
    },
  },
});

const App = () => {
  useEffect(() => {
    // Load Google Maps API
    const loadGoogleMapsScript = () => {
      const apiKey = import.meta.env.VITE_GOOGLE_MAPS_KEY;
      if (!apiKey) {
        console.error(
          "Google Maps API key is not defined in environment variables"
        );
        return;
      }

      const script = document.createElement("script");
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;
      script.async = true;
      script.defer = true;
      script.onload = () => {
        window.dispatchEvent(new Event("google-maps-loaded"));
      };
      document.head.appendChild(script);
    };

    if (!window.google) {
      loadGoogleMapsScript();
    }
  }, []);

  return (
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        <MainLayout>
          <Routes>
            <Route path="/" element={<Dashboard />} />
            <Route path="/claims/new" element={<NewClaimForm />}>
              <Route index element={<Navigate to="claim-info" replace />} />
              <Route path="claim-info" element={<ClaimInfoTab />} />
              <Route path="parts" element={<PartsTab />} />
              <Route path="annexes" element={<AnnexesTab />} />
            </Route>
          </Routes>
        </MainLayout>
      </BrowserRouter>
    </QueryClientProvider>
  );
};

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/main.tsx
================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.tsx";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .env.example
================
VITE_GOOGLE_MAPS_KEY=your_google_maps_api_key_here

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment variables
.env
.env.local
.env.*.local

================
File: document-checkpoint1.md
================
# CCMS Parts Management Documentation

## Component Hierarchy

```
PartsTab/
├── ActionButtons/
│   ├── Add from NAGS
│   ├── Add Custom Part
│   ├── Add Labor
│   ├── Add Deductible Buyback
│   └── Add Rebate
├── PartEntryForm (Dynamic)/
│   ├── NAGS Form
│   ├── Custom Part Form
│   ├── Labor Form
│   ├── Deductible Form
│   └── Rebate Form
├── PartsTable/
│   ├── Part Number
│   ├── Description
│   ├── List Price
│   ├── Shop Price
│   └── Carrier Price
├── FinancialSummary/
│   ├── Subtotal
│   ├── Tax
│   └── Total
└── ShopInvoice/
    ├── Basic Info
    │   ├── Number
    │   ├── Date
    │   └── Shop Amount
    ├── Financial Details
    │   ├── Pre Tax Amount
    │   ├── Shop Admin Fee (% and $)
    │   ├── Shop Admin Fee Tax
    │   ├── Deductible
    │   ├── Total
    │   ├── Shop Amount
    │   └── Variance
    └── Upload Section
```

## Component Functions

### 1. PartsTab

**Purpose**: Main container for parts management functionality  
**Location**: `src/components/claims/tabs/parts/PartsTab.tsx`  
**Functions**:

- Manages active form state
- Coordinates communication between components
- Handles layout and component organization

### 2. Action Buttons

**Purpose**: Trigger different part entry forms  
**Location**: Within PartsTab  
**States**:

- NAGS (default active)
- Custom Part
- Labor
- Deductible Buyback
- Rebate

### 3. PartEntryForm

**Purpose**: Dynamic form for entering different types of parts/items  
**Location**: `src/components/claims/tabs/parts/PartEntryForm.tsx`  
**Props**:

- formType: "nags" | "custom" | "labor" | "deductible" | "rebate"
- onClose: () => void
- onSubmit: (data: any) => void

### 4. PartsTable

**Purpose**: Display and manage added parts  
**Location**: `src/components/claims/tabs/parts/PartsTable.tsx`  
**Features**:

- Display parts in tabular format
- Sort functionality (planned)
- Edit/Delete parts (planned)

### 5. FinancialSummary

**Purpose**: Show financial calculations  
**Location**: `src/components/claims/tabs/parts/FinancialSummary.tsx`  
**Calculations**:

- Subtotal of all parts
- Tax calculations
- Total amount

### 6. ShopInvoice

**Purpose**: Manage shop invoice details and uploads  
**Location**: `src/components/claims/tabs/parts/ShopInvoice.tsx`  
**Features**:

- Invoice information entry
- Financial calculations
- Document upload capability
- Variance calculation

## State Management

Currently using local React state with useState  
Future considerations:

- Implement Redux/Context for global state
- Add form validation
- Implement calculation logic

## Planned Features

1. Form validation
2. Part search functionality
3. Tax calculation automation
4. Document preview
5. Part price history
6. Audit trail

## File Structure

```
src/
└── components/
    └── claims/
        ├── modals/
        │   └── UploadModal.tsx
        └── tabs/
            └── parts/
                ├── PartsTab.tsx
                ├── PartEntryForm.tsx
                ├── PartsTable.tsx
                ├── FinancialSummary.tsx
                ├── ShopInvoice.tsx
                └── ShopInvoiceUpload.tsx
```

## Development Guidelines

1. Use TypeScript for type safety
2. Follow Tailwind CSS conventions
3. Implement responsive design
4. Add proper error handling
5. Include loading states
6. Add proper accessibility attributes

## Getting Started

1. Install dependencies:

```bash
npm install
npm install -D @tailwindcss/forms
```

2. Configure Tailwind:

```js
// tailwind.config.js
module.exports = {
  plugins: [require("@tailwindcss/forms")],
};
```

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: frontend notes.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-22T15:39:07.860Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.trunk/
  configs/
    .markdownlint.yaml
    svgo.config.js
  .gitignore
  trunk.yaml
prisma/
  schema.prisma
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    claims/
      modals/
        UploadModal.tsx
      tabs/
        parts/
          ActionButtons.tsx
          FinancialSummary.tsx
          PartEntryForm.tsx
          PartsTab.tsx
          PartsTable.tsx
          ShopInvoice.tsx
          ShopInvoiceUpload.tsx
        AnnexesTab.tsx
        ClaimInfoTab.tsx
      ClaimsTable.tsx
      FilterBar.tsx
      NewClaimForm.tsx
      StatusBadge.tsx
    common/
      AddressAutocomplete.tsx
    layout/
      Header.tsx
      MainLayout.tsx
      Sidebar.tsx
  hooks/
    useInsurers.ts
  pages/
    Dashboard.tsx
  server/
    routes/
      insurers.ts
    index.ts
  types/
    google-maps.d.ts
    index.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.example
.gitignore
document-checkpoint1.md
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .trunk/configs/.markdownlint.yaml
================
# Prettier friendly markdownlint config (all formatting rules disabled)
extends: markdownlint/style/prettier

================
File: .trunk/configs/svgo.config.js
================
module.exports = {
  plugins: [
    {
      name: "preset-default",
      params: {
        overrides: {
          removeViewBox: false, // https://github.com/svg/svgo/issues/1128
          sortAttrs: true,
          removeOffCanvasPaths: true,
        },
      },
    },
  ],
};

================
File: .trunk/.gitignore
================
*out
*logs
*actions
*notifications
*tools
plugins
user_trunk.yaml
user.yaml
tmp

================
File: .trunk/trunk.yaml
================
# This file controls the behavior of Trunk: https://docs.trunk.io/cli
# To learn more about the format of this file, see https://docs.trunk.io/reference/trunk-yaml
version: 0.1
cli:
  version: 1.22.8
# Trunk provides extensibility via plugins. (https://docs.trunk.io/plugins)
plugins:
  sources:
    - id: trunk
      ref: v1.6.6
      uri: https://github.com/trunk-io/plugins
# Many linters and tools depend on runtimes - configure them here. (https://docs.trunk.io/runtimes)
runtimes:
  enabled:
    - node@18.20.5
    - python@3.10.8
# This is the section where you manage your linters. (https://docs.trunk.io/check/configuration)
lint:
  enabled:
    - checkov@3.2.343
    - eslint@9.17.0
    - git-diff-check
    - markdownlint@0.43.0
    - osv-scanner@1.9.2
    - prettier@3.4.2
    - svgo@3.3.2
    - trufflehog@3.87.2
actions:
  disabled:
    - trunk-announce
    - trunk-check-pre-push
    - trunk-fmt-pre-commit
  enabled:
    - trunk-upgrade-available

================
File: prisma/schema.prisma
================
model Insurer {
  id        String   @id @default(cuid())
  name      String
  code      String?  @unique
  isActive  Boolean  @default(true)
  claims    Claim[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Claim {
  insurerId String?
  insurer   Insurer? @relation(fields: [insurerId], references: [id])
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/claims/modals/UploadModal.tsx
================
import { useState, useCallback } from "react";
import { Upload } from "lucide-react";
import { useDropzone } from "react-dropzone";

interface UploadModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (file: File, category: string) => void;
}

export const UploadModal = ({
  isOpen,
  onClose,
  onUpload,
}: UploadModalProps) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [category, setCategory] = useState("Insurance Documents");

  const onDrop = useCallback((acceptedFiles: File[]) => {
    setSelectedFile(acceptedFiles[0]);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <h2 className="text-lg font-medium mb-4">Upload File</h2>

        <div
          {...getRootProps()}
          className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer"
        >
          <input {...getInputProps()} />
          <Upload className="h-10 w-10 text-gray-400 mx-auto mb-4" />
          {isDragActive ? (
            <p>Drop the file here</p>
          ) : (
            <div>
              <p className="text-gray-600">Drag and drop your file here or</p>
              <p className="text-blue-600">browse files</p>
            </div>
          )}
        </div>

        {selectedFile && (
          <div className="mt-4 p-2 bg-gray-50 rounded">
            <p className="text-sm">{selectedFile.name}</p>
          </div>
        )}

        <div className="mt-4">
          <label className="block text-sm font-medium text-gray-700">
            Category
          </label>
          <select
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            className="mt-1 block w-full border rounded-md px-3 py-2"
          >
            <option>Insurance Documents</option>
            <option>Evidence Photos</option>
            <option>Repair Estimates</option>
            <option>Other Documents</option>
          </select>
        </div>

        <div className="mt-6 flex justify-end gap-3">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            Cancel
          </button>
          <button
            onClick={() => selectedFile && onUpload(selectedFile, category)}
            disabled={!selectedFile}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            Upload
          </button>
        </div>
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/ActionButtons.tsx
================
interface ActionButtonsProps {
  activeForm: "nags" | "custom" | "labor" | "deductible" | "rebate" | null;
  onFormChange: (
    form: "nags" | "custom" | "labor" | "deductible" | "rebate" | null
  ) => void;
}

export const ActionButtons = ({
  activeForm,
  onFormChange,
}: ActionButtonsProps) => {
  const buttons = [
    { id: "nags", label: "Add from NAGS", icon: "+" },
    { id: "custom", label: "Add Custom Part", icon: "+" },
    { id: "labor", label: "Add Labor", icon: "🔧" },
    { id: "deductible", label: "Add Deductible Buyback", icon: "$" },
    { id: "rebate", label: "Add Rebate", icon: "↩️" },
  ] as const;

  return (
    <div className="bg-white rounded-lg shadow-sm p-4">
      <div className="flex gap-4">
        {buttons.map((button) => (
          <button
            key={button.id}
            onClick={() => onFormChange(button.id)}
            className={`
                 flex items-center gap-2 px-4 py-2 rounded-lg
                 ${
                   activeForm === button.id
                     ? "bg-blue-600 text-white"
                     : "bg-gray-50 hover:bg-gray-100"
                 }
               `}
          >
            <span>{button.icon}</span>
            {button.label}
          </button>
        ))}
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/FinancialSummary.tsx
================
// src/components/claims/tabs/parts/FinancialSummary.tsx
export const FinancialSummary = () => {
  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h3 className="text-lg font-medium mb-4">Financial Summary</h3>
      <div className="space-y-3">
        <div className="flex justify-between">
          <span>Subtotal</span>
          <span>$0.00</span>
        </div>
        <div className="flex justify-between">
          <span>Tax (13%)</span>
          <span>$0.00</span>
        </div>
        <div className="flex justify-between font-medium">
          <span>Total</span>
          <span>$0.00</span>
        </div>
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/PartEntryForm.tsx
================
// src/components/claims/tabs/parts/PartEntryForm.tsx
interface PartEntryFormProps {
  formType: "nags" | "custom" | "labor" | "deductible" | "rebate";
  onClose: () => void;
  onSubmit: (data: any) => void;
}

export const PartEntryForm = ({
  formType,
  onClose,
  onSubmit,
}: PartEntryFormProps) => {
  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium">
          {formType === "nags" && "Add from NAGS"}
          {formType === "custom" && "Add Custom Part"}
          {formType === "labor" && "Add Labor"}
          {formType === "deductible" && "Add Deductible Buyback"}
          {formType === "rebate" && "Add Rebate"}
        </h3>
        <button onClick={onClose} className="text-gray-400 hover:text-gray-500">
          ×
        </button>
      </div>

      {/* Placeholder form fields - customize based on formType */}
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Description
          </label>
          <input
            type="text"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Price
          </label>
          <input
            type="number"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
      </div>

      <div className="flex justify-end gap-3 pt-4">
        <button
          onClick={onClose}
          className="px-4 py-2 text-gray-700 hover:text-gray-900"
        >
          Cancel
        </button>
        <button
          onClick={() => onSubmit({ description: "", price: 0 })}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          Add
        </button>
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/PartsTab.tsx
================
// src/components/claims/tabs/parts/PartsTab.tsx
import { useState } from "react";
import { ShopInvoice } from "./ShopInvoice";
import { PartsTable } from "./PartsTable";
import { PartEntryForm } from "./PartEntryForm";
import { FinancialSummary } from "./FinancialSummary";

export const PartsTab = () => {
  const [activeForm, setActiveForm] = useState<
    "nags" | "custom" | "labor" | "deductible" | "rebate" | null
  >(null);

  const buttonConfigs = [
    {
      id: "nags",
      label: "Add from NAGS",
      icon: "+",
      colorClass: "bg-blue-600 text-white hover:bg-blue-700",
    },
    {
      id: "custom",
      label: "Add Custom Part",
      icon: "+",
      colorClass: "bg-gray-100 hover:bg-gray-200",
    },
    {
      id: "labor",
      label: "Add Labor",
      icon: "🔧",
      colorClass: "bg-gray-100 hover:bg-gray-200",
    },
    {
      id: "deductible",
      label: "Add Deductible Buyback",
      icon: "$",
      colorClass: "bg-gray-100 hover:bg-gray-200",
    },
    {
      id: "rebate",
      label: "Add Rebate",
      icon: "↩️",
      colorClass: "bg-gray-100 hover:bg-gray-200",
    },
  ] as const;

  return (
    <div className="flex gap-6">
      {/* Main Content - Left Side */}
      <div className="flex-grow space-y-6">
        {/* Action Buttons Container */}
        <div className="bg-white p-4 rounded-lg shadow">
          <div className="flex gap-4">
            {buttonConfigs.map((button) => (
              <button
                key={button.id}
                onClick={() => setActiveForm(button.id)}
                className={`
                  flex items-center gap-2 px-4 py-2 rounded-lg 
                  ${
                    activeForm === button.id
                      ? "bg-blue-600 text-white"
                      : button.colorClass
                  }
                  transition-colors duration-150
                `}
              >
                <span>{button.icon}</span>
                {button.label}
              </button>
            ))}
          </div>
        </div>

        {/* Form Container */}
        {activeForm && (
          <div className="bg-white p-6 rounded-lg shadow">
            <PartEntryForm
              formType={activeForm}
              onClose={() => setActiveForm(null)}
              onSubmit={(data) => {
                console.log("Form submitted:", data);
                setActiveForm(null);
              }}
            />
          </div>
        )}

        {/* Parts Table */}
        <PartsTable />

        {/* Financial Summary */}
        <FinancialSummary />
      </div>

      {/* Shop Invoice - Right Side */}
      <div className="w-96">
        <ShopInvoice />
      </div>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/PartsTable.tsx
================
// src/components/claims/tabs/parts/PartsTable.tsx
export const PartsTable = () => {
  return (
    <div className="bg-white rounded-lg shadow">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
              Part Number
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
              Description
            </th>
            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
              List Price
            </th>
            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
              Shop Price
            </th>
            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
              Carrier Price
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          <tr>
            <td className="px-6 py-4 text-sm text-gray-500" colSpan={5}>
              No parts added yet
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

================
File: src/components/claims/tabs/parts/ShopInvoice.tsx
================
// src/components/claims/tabs/parts/ShopInvoice.tsx
import { useState } from "react";
import { ShopInvoiceUpload } from "./ShopInvoiceUpload";

export const ShopInvoice = () => {
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [formData, setFormData] = useState({
    number: "",
    date: "",
    shopAmount: "",
    preTaxAmount: "",
    shopAdminFee: {
      percentage: "",
      amount: "",
    },
    shopAdminFeeTax: "",
    deductible: "",
    total: "",
    shopAmountFinal: "",
    variance: "",
  });

  const handleUpload = (file: File) => {
    console.log("Uploaded shop invoice:", file);
    setIsUploadModalOpen(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h3 className="text-lg font-medium mb-4">Shop Invoice</h3>

      <div className="space-y-4">
        {/* Invoice Number */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Number
          </label>
          <input
            type="text"
            name="number"
            value={formData.number}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>

        {/* Date */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Date
          </label>
          <input
            type="date"
            name="date"
            value={formData.date}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            placeholder="yyyy-mm-dd"
          />
        </div>

        {/* Shop Amount */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Shop Amount
          </label>
          <input
            type="number"
            name="shopAmount"
            value={formData.shopAmount}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Pre Tax Amount */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Pre Tax Amount
          </label>
          <input
            type="number"
            name="preTaxAmount"
            value={formData.preTaxAmount}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Shop Admin Fee */}
        <div className="flex gap-2">
          <div className="w-1/3">
            <label className="block text-sm font-medium text-gray-700">%</label>
            <input
              type="number"
              name="shopAdminFee.percentage"
              value={formData.shopAdminFee.percentage}
              onChange={handleInputChange}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              step="0.01"
            />
          </div>
          <div className="w-2/3">
            <label className="block text-sm font-medium text-gray-700">$</label>
            <input
              type="number"
              name="shopAdminFee.amount"
              value={formData.shopAdminFee.amount}
              onChange={handleInputChange}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              step="0.01"
            />
          </div>
        </div>

        {/* Shop Admin Fee Tax */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Shop Admin Fee Tax
          </label>
          <input
            type="number"
            name="shopAdminFeeTax"
            value={formData.shopAdminFeeTax}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Deductible */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Deductible
          </label>
          <input
            type="number"
            name="deductible"
            value={formData.deductible}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Total */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Total
          </label>
          <input
            type="number"
            name="total"
            value={formData.total}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
            readOnly
          />
        </div>

        {/* Shop Amount */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Shop Amount
          </label>
          <input
            type="number"
            name="shopAmountFinal"
            value={formData.shopAmountFinal}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
          />
        </div>

        {/* Variance */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Variance
          </label>
          <input
            type="number"
            name="variance"
            value={formData.variance}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            step="0.01"
            readOnly
          />
        </div>

        {/* Upload Section */}
        <div
          onClick={() => setIsUploadModalOpen(true)}
          className="mt-6 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400"
        >
          <div className="text-gray-600">
            <p>Drop files here or click to upload</p>
            <p className="text-sm">
              To be able to audit the invoice, please complete the above.
            </p>
          </div>
        </div>

        {/* Calculate Button */}
        <button className="w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
          Calculate
        </button>
      </div>

      <ShopInvoiceUpload
        isOpen={isUploadModalOpen}
        onClose={() => setIsUploadModalOpen(false)}
        onUpload={handleUpload}
      />
    </div>
  );
};

================
File: src/components/claims/tabs/parts/ShopInvoiceUpload.tsx
================
// src/components/claims/tabs/parts/ShopInvoiceUpload.tsx
import { UploadModal } from "../../modals/UploadModal";

interface ShopInvoiceUploadProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (file: File) => void;
}

export const ShopInvoiceUpload = ({
  isOpen,
  onClose,
  onUpload,
}: ShopInvoiceUploadProps) => {
  return (
    <UploadModal
      isOpen={isOpen}
      onClose={onClose}
      onUpload={(file) => onUpload(file)}
    />
  );
};

================
File: src/components/claims/tabs/AnnexesTab.tsx
================
// src/components/claims/tabs/AnnexesTab.tsx
import { useState } from "react";
import { Upload, Eye, File, Image } from "lucide-react";
import { UploadModal } from "../modals/UploadModal";

interface FileItem {
  id: string;
  name: string;
  category: string;
  type: "pdf" | "image";
}

export const AnnexesTab = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [files, setFiles] = useState<FileItem[]>([
    {
      id: "1",
      name: "Insurance_Report.pdf",
      category: "Insurance Documents",
      type: "pdf",
    },
    {
      id: "2",
      name: "Damage_Photo.jpg",
      category: "Evidence Photos",
      type: "image",
    },
  ]);

  const handleUpload = (file: File, category: string) => {
    // Handle file upload logic here
    const newFile: FileItem = {
      id: Date.now().toString(),
      name: file.name,
      category,
      type: file.type.includes("pdf") ? "pdf" : "image",
    };
    setFiles([...files, newFile]);
    setIsModalOpen(false);
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-lg font-medium">Uploaded Files</h2>
        <button
          onClick={() => setIsModalOpen(true)}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
        >
          <Upload className="h-4 w-4" />
          Upload File
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-sm">
        <table className="min-w-full divide-y divide-gray-200">
          <tbody className="divide-y divide-gray-200">
            {files.map((file) => (
              <tr key={file.id}>
                <td className="py-4 px-6 whitespace-nowrap">
                  <div className="flex items-center">
                    {file.type === "pdf" ? (
                      <File className="h-8 w-8 text-red-500" />
                    ) : (
                      <Image className="h-8 w-8 text-blue-500" />
                    )}
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">
                        {file.name}
                      </div>
                      <div className="text-sm text-gray-500">
                        {file.category}
                      </div>
                    </div>
                  </div>
                </td>
                <td className="py-4 px-6 whitespace-nowrap text-right">
                  <button className="text-gray-400 hover:text-gray-600">
                    <Eye className="h-5 w-5" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <UploadModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onUpload={handleUpload}
      />
    </div>
  );
};

================
File: src/components/claims/tabs/ClaimInfoTab.tsx
================
// src/components/claims/tabs/ClaimInfoTab.tsx
import { useForm } from "react-hook-form";
import { useEffect } from "react";
import { AddressAutocomplete } from "../../common/AddressAutocomplete";
import { useInsurers } from "../../../hooks/useInsurers";

interface ClaimFormData {
  firstName: string;
  lastName: string;
  address1: string;
  address2: string;
  city: string;
  province: string;
  postalCode: string;
  email: string;
  homeTel: string;
  businessTel: string;
  driversLicense: string;
  insurerId: string;
  insurerAuthNumber: string;
}

export const ClaimInfoTab = () => {
  const { register, control, setValue, watch } = useForm<ClaimFormData>();
  const { data: insurers, isLoading: isLoadingInsurers } = useInsurers();

  // Add this near the top of your component to verify the key is loaded
  console.log("API Key available:", !!import.meta.env.VITE_GOOGLE_MAPS_KEY);

  // Load Google Maps API
  useEffect(() => {
    const loadGoogleMapsScript = () => {
      // Check if the key exists
      const apiKey = import.meta.env.VITE_GOOGLE_MAPS_KEY;
      if (!apiKey) {
        console.error(
          "Google Maps API key is not defined in environment variables"
        );
        return;
      }

      const script = document.createElement("script");
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;
      script.async = true;
      script.defer = true;
      script.onload = () => {
        window.dispatchEvent(new Event("google-maps-loaded"));
      };
      script.onerror = (error) => {
        console.error("Error loading Google Maps script:", error);
      };
      document.head.appendChild(script);
    };

    if (!window.google) {
      loadGoogleMapsScript();
    }
  }, []);

  return (
    <div className="space-y-6">
      {/* First Row: Carrier/Insurer and Shop Information */}
      <div className="grid grid-cols-2 gap-6">
        {/* Carrier/Insurer Information */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">
            Carrier/Insurer Information
          </h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Insurer's Name
              </label>
              <select
                {...register("insurerId")}
                className="mt-1 block w-full border rounded-md px-3 py-2"
                disabled={isLoadingInsurers}
              >
                <option value="">Select Insurer</option>
                {insurers?.map((insurer) => (
                  <option key={insurer.id} value={insurer.id}>
                    {insurer.name} {insurer.code ? `(${insurer.code})` : ""}
                  </option>
                ))}
              </select>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Insurer Auth #
                </label>
                <input
                  {...register("insurerAuthNumber")}
                  type="text"
                  className="mt-1 block w-full border rounded-md px-3 py-2"
                />
              </div>
              <div className="flex items-center mt-6">
                <input type="checkbox" className="mr-2" />
                <label className="text-sm text-gray-700">
                  Talked to Insured
                </label>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Replacement Cost
                </label>
                <select className="mt-1 block w-full border rounded-md px-3 py-2">
                  <option>Select type</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Claim Initiated By
                </label>
                <select className="mt-1 block w-full border rounded-md px-3 py-2">
                  <option>Select initiator</option>
                </select>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Policy #
                </label>
                <input
                  type="text"
                  className="mt-1 block w-full border rounded-md px-3 py-2"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Claim #
                </label>
                <input
                  type="text"
                  className="mt-1 block w-full border rounded-md px-3 py-2"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Deductible
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Authorization Notes
              </label>
              <textarea className="mt-1 block w-full border rounded-md px-3 py-2 h-24" />
            </div>
          </div>
        </div>

        {/* Shop Information */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-medium">Shop Information</h2>
            <button className="text-blue-600 hover:text-blue-700">
              <span className="sr-only">Search</span>
              🔍
            </button>
          </div>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Shop Name
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Address
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Contact #
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Second Row: Customer and Vehicle Information */}
      <div className="grid grid-cols-2 gap-6">
        {/* Customer Information */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">Customer Information</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                First Name
              </label>
              <input
                {...register("firstName")}
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Last Name
              </label>
              <input
                {...register("lastName")}
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              Address 1
            </label>
            <AddressAutocomplete control={control} setValue={setValue} />
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              Address 2
            </label>
            <input
              {...register("address2")}
              type="text"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            />
          </div>
          <div className="grid grid-cols-3 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                City
              </label>
              <input
                {...register("city")}
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Province
              </label>
              <select
                {...register("province")}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="">Select province</option>
                <option value="AB">Alberta</option>
                <option value="BC">British Columbia</option>
                <option value="MB">Manitoba</option>
                <option value="NB">New Brunswick</option>
                <option value="NL">Newfoundland and Labrador</option>
                <option value="NS">Nova Scotia</option>
                <option value="ON">Ontario</option>
                <option value="PE">Prince Edward Island</option>
                <option value="QC">Quebec</option>
                <option value="SK">Saskatchewan</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Postal Code
              </label>
              <input
                {...register("postalCode")}
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                type="email"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Home Tel #
              </label>
              <input
                type="tel"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              Business Tel #
            </label>
            <input
              type="tel"
              className="mt-1 block w-full border rounded-md px-3 py-2"
            />
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              Driver's License
            </label>
            <input
              type="text"
              className="mt-1 block w-full border rounded-md px-3 py-2"
            />
          </div>
        </div>

        {/* Vehicle Information */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">Vehicle Information</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Year
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Make
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Model
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Body Style
              </label>
              <select className="mt-1 block w-full border rounded-md px-3 py-2">
                <option>Select style</option>
              </select>
            </div>
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">
              VIN
            </label>
            <input
              type="text"
              className="mt-1 block w-full border rounded-md px-3 py-2"
            />
          </div>
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Plate #
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Color
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Odometer
              </label>
              <input
                type="text"
                className="mt-1 block w-full border rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                License Province
              </label>
              <select className="mt-1 block w-full border rounded-md px-3 py-2">
                <option>Select province</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Third Row: Work Order Memo and Internal Notes */}
      <div className="grid grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">Work Order Memo</h2>
          <textarea className="w-full h-32 border rounded-md px-3 py-2" />
        </div>
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h2 className="text-lg font-medium mb-4">Internal Notes</h2>
          <textarea className="w-full h-32 border rounded-md px-3 py-2" />
        </div>
      </div>
    </div>
  );
};

================
File: src/components/claims/ClaimsTable.tsx
================
// src/components/claims/ClaimsTable.tsx
import { StatusBadge } from "./StatusBadge";

export const ClaimsTable = () => {
  return (
    <div className="bg-white rounded-lg shadow">
      <table className="min-w-full">
        <thead>
          <tr className="border-b">
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Claim ID
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Deductible
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Shop Name
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Last Name
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              First Name
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Contact
            </th>
            <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">
              Status
            </th>
          </tr>
        </thead>
        <tbody>
          {/* Your table rows here */}
          <tr>
            <td className="px-6 py-4">#CL-2025001</td>
            <td className="px-6 py-4">$500</td>
            <td className="px-6 py-4">AutoFix Pro</td>
            <td className="px-6 py-4">Smith</td>
            <td className="px-6 py-4">John</td>
            <td className="px-6 py-4">+1 234-567-8900</td>
            <td className="px-6 py-4">
              <StatusBadge status="open" />
            </td>
          </tr>
          {/* More rows... */}
        </tbody>
      </table>
    </div>
  );
};

================
File: src/components/claims/FilterBar.tsx
================
// src/components/claims/FilterBar.tsx
interface FilterBarProps {
  statusFilter: string;
  onStatusChange: (value: string) => void;
  onSearchChange: (value: string) => void;
}

export const FilterBar = ({
  statusFilter,
  onStatusChange,
  onSearchChange,
}: FilterBarProps) => {
  return (
    <div className="flex gap-4 bg-white p-4 rounded-lg shadow-sm">
      <select
        value={statusFilter}
        onChange={(e) => onStatusChange(e.target.value)}
        className="border rounded-md py-2 px-3"
      >
        <option value="all">All Status</option>
        <option value="open">Open</option>
        <option value="assessing">Assessing</option>
        <option value="closed">Closed</option>
      </select>

      <input
        type="text"
        placeholder="Search claims..."
        onChange={(e) => onSearchChange(e.target.value)}
        className="border rounded-md py-2 px-3"
      />
    </div>
  );
};

================
File: src/components/claims/NewClaimForm.tsx
================
// src/components/claims/NewClaimForm.tsx
import { Link, useLocation, Outlet } from "react-router-dom";
import { ArrowLeft } from "lucide-react";

export const NewClaimForm = () => {
  const location = useLocation();
  const currentTab = location.pathname.split("/").pop();

  const tabs = [
    { id: "claim-info", label: "Claim Info" },
    { id: "parts", label: "Parts" },
    { id: "annexes", label: "Annexes" },
  ];

  return (
    <div className="space-y-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link
            to="/"
            className="flex items-center gap-2 text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="h-5 w-5" />
            Back to Dashboard
          </Link>
          <h1 className="text-2xl font-semibold">New Claim</h1>
        </div>
        <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          Save Claim
        </button>
      </div>

      {/* Tabs Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {tabs.map((tab) => (
            <Link
              key={tab.id}
              to={`/claims/new/${tab.id}`}
              className={`
                py-4 px-1 border-b-2 font-medium text-lg
                ${
                  currentTab === tab.id
                    ? "border-blue-500 text-blue-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }
              `}
            >
              {tab.label}
            </Link>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      <div className="mt-6">
        <Outlet />
      </div>
    </div>
  );
};

================
File: src/components/claims/StatusBadge.tsx
================
// src/components/claims/StatusBadge.tsx
interface StatusBadgeProps {
  status: "open" | "assessing" | "closed";
}

export const StatusBadge = ({ status }: StatusBadgeProps) => {
  const getStatusStyles = () => {
    switch (status) {
      case "open":
        return "bg-green-100 text-green-800";
      case "assessing":
        return "bg-yellow-100 text-yellow-800";
      case "closed":
        return "bg-gray-100 text-gray-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <span
      className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusStyles()}`}
    >
      {status.charAt(0).toUpperCase() + status.slice(1)}
    </span>
  );
};

================
File: src/components/common/AddressAutocomplete.tsx
================
import { useEffect, useRef } from "react";
import { UseFormSetValue, Control, Controller } from "react-hook-form";
import type { ClaimFormData } from "../claims/tabs/ClaimInfoTab";

interface AddressAutocompleteProps {
  control: Control<ClaimFormData>;
  setValue: UseFormSetValue<ClaimFormData>;
  disabled?: boolean;
}

export const AddressAutocomplete = ({
  control,
  setValue,
  disabled = false,
}: AddressAutocompleteProps) => {
  const autoCompleteRef = useRef<google.maps.places.Autocomplete | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    const initializeAutocomplete = () => {
      if (!window.google || !inputRef.current) return;

      const options = {
        componentRestrictions: { country: "ca" },
        fields: ["address_components", "formatted_address", "geometry"],
      };

      autoCompleteRef.current = new window.google.maps.places.Autocomplete(
        inputRef.current,
        options
      );

      autoCompleteRef.current.addListener("place_changed", () => {
        const place = autoCompleteRef.current?.getPlace();

        if (!place?.address_components) return;

        const addressData = {
          street: "",
          city: "",
          province: "",
          postalCode: "",
        };

        place.address_components.forEach((component) => {
          const type = component.types[0];
          if (type === "street_number") {
            addressData.street = component.long_name;
          }
          if (type === "route") {
            addressData.street += " " + component.long_name;
          }
          if (type === "locality") {
            addressData.city = component.long_name;
          }
          if (type === "administrative_area_level_1") {
            addressData.province = component.short_name;
          }
          if (type === "postal_code") {
            addressData.postalCode = component.long_name;
          }
        });

        setValue("address1", addressData.street.trim());
        setValue("city", addressData.city);
        setValue("province", addressData.province);
        setValue("postalCode", addressData.postalCode);
      });
    };

    // Initialize autocomplete when the script is loaded
    if (window.google) {
      initializeAutocomplete();
    } else {
      // Add event listener for when the script loads
      const handleScriptLoad = () => {
        initializeAutocomplete();
      };
      window.addEventListener("google-maps-loaded", handleScriptLoad);
      return () => {
        window.removeEventListener("google-maps-loaded", handleScriptLoad);
      };
    }

    return () => {
      if (autoCompleteRef.current) {
        google.maps.event.clearInstanceListeners(autoCompleteRef.current);
      }
    };
  }, [setValue]);

  return (
    <Controller
      name="address1"
      control={control}
      render={({ field }) => (
        <input
          {...field}
          ref={(e) => {
            inputRef.current = e;
            field.ref(e);
          }}
          type="text"
          className="mt-1 block w-full border rounded-md px-3 py-2"
          placeholder="Start typing to search address..."
          disabled={disabled}
        />
      )}
    />
  );
};

================
File: src/components/layout/Header.tsx
================
// src/components/layout/Header.tsx
import { Search, Bell } from "lucide-react";

const Header = () => {
  return (
    <header className="h-16 bg-white border-b px-6 flex items-center justify-between">
      <div className="flex-1 max-w-xl">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Global Search..."
            className="w-full pl-10 pr-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
      <div className="flex items-center gap-4">
        <button className="p-2 hover:bg-gray-100 rounded-full">
          <Bell className="h-5 w-5 text-gray-500" />
        </button>
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
            <span className="text-sm font-medium">JD</span>
          </div>
          <span className="font-medium">John Doe</span>
        </div>
      </div>
    </header>
  );
};

export default Header;

================
File: src/components/layout/MainLayout.tsx
================
// src/components/layout/MainLayout.tsx
import { Search, Bell, Plus } from "lucide-react";
import { Link } from "react-router-dom";
import { Sidebar } from "./Sidebar";

interface MainLayoutProps {
  children: React.ReactNode;
}

export const MainLayout = ({ children }: MainLayoutProps) => {
  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar />
      <div className="flex-1 flex flex-col ml-64">
        <header className="h-16 bg-white border-b px-6 flex items-center justify-between sticky top-0">
          <div className="flex-1 max-w-xl">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="Global Search..."
                className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div className="flex items-center gap-6">
            <Link
              to="/claims/new"
              className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
            >
              <Plus className="h-4 w-4" />
              New Claim
            </Link>

            <button className="relative p-2 hover:bg-gray-50 rounded-full">
              <Bell className="h-5 w-5 text-gray-600" />
              <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
            </button>

            <div className="flex items-center gap-3">
              <div className="w-9 h-9 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center font-medium">
                JD
              </div>
              <div>
                <div className="text-sm font-medium text-gray-700">
                  John Doe
                </div>
                <div className="text-xs text-gray-500">Administrator</div>
              </div>
            </div>
          </div>
        </header>
        <main className="flex-1 overflow-auto p-6">{children}</main>
      </div>
    </div>
  );
};

================
File: src/components/layout/Sidebar.tsx
================
import { Link, useLocation } from "react-router-dom";
import {
  LayoutDashboard,
  FileText,
  Building2,
  Users,
  Settings,
  Search,
} from "lucide-react";

export const Sidebar = () => {
  const location = useLocation();

  return (
    <div className="w-64 bg-white border-r h-screen fixed left-0 top-0">
      <div className="p-6 border-b">
        <div className="flex items-center gap-2">
          <div className="grid grid-cols-2 gap-1">
            <div className="w-3 h-3 bg-blue-500 rounded-sm"></div>
            <div className="w-3 h-3 bg-blue-400 rounded-sm"></div>
            <div className="w-3 h-3 bg-blue-400 rounded-sm"></div>
            <div className="w-3 h-3 bg-blue-500 rounded-sm"></div>
          </div>
          <h1 className="text-xl font-bold text-gray-800">CCMS</h1>
        </div>
      </div>
      <nav className="p-4 space-y-2">
        <SidebarLink
          href="/"
          icon={<LayoutDashboard size={20} />}
          text="Dashboard"
          active={location.pathname === "/"}
        />
        <SidebarLink
          href="/reports"
          icon={<FileText size={20} />}
          text="Reports"
          active={location.pathname === "/reports"}
        />
        <SidebarLink
          href="/insurer"
          icon={<Building2 size={20} />}
          text="Insurer"
          active={location.pathname === "/insurer"}
        />
        <SidebarLink
          href="/customers"
          icon={<Users size={20} />}
          text="Customers"
          active={location.pathname === "/customers"}
        />
        <SidebarLink
          href="/settings"
          icon={<Settings size={20} />}
          text="Settings"
          active={location.pathname === "/settings"}
        />
      </nav>
    </div>
  );
};

interface SidebarLinkProps {
  href: string;
  icon: React.ReactNode;
  text: string;
  active?: boolean;
}

export const SidebarLink = ({ href, icon, text, active }: SidebarLinkProps) => {
  return (
    <Link
      to={href}
      className={`flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors
        ${
          active
            ? "bg-blue-50 text-blue-600"
            : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
        }`}
    >
      <span className="mr-3">{icon}</span>
      {text}
    </Link>
  );
};

================
File: src/hooks/useInsurers.ts
================
import { useQuery } from "@tanstack/react-query";
import axios from "axios";

interface Insurer {
  id: string;
  name: string;
  code: string | null;
}

export const useInsurers = () => {
  return useQuery<Insurer[]>({
    queryKey: ["insurers"],
    queryFn: async () => {
      const { data } = await axios.get("/api/insurers");
      return data;
    },
  });
};

================
File: src/pages/Dashboard.tsx
================
// src/pages/Dashboard.tsx
import { useState } from "react";
import { FilterBar } from "../components/claims/FilterBar";
import { ClaimsTable } from "../components/claims/ClaimsTable";

export const Dashboard = () => {
  const [statusFilter, setStatusFilter] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");

  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-semibold">Dashboard</h1>

      <FilterBar
        statusFilter={statusFilter}
        onStatusChange={setStatusFilter}
        onSearchChange={setSearchQuery}
      />

      <ClaimsTable />
    </div>
  );
};

================
File: src/server/routes/insurers.ts
================
import { Router } from "express";
import { prisma } from "../db";

const router = Router();

router.get("/", async (req, res) => {
  try {
    const insurers = await prisma.insurer.findMany({
      where: {
        isActive: true,
      },
      orderBy: {
        name: "asc",
      },
      select: {
        id: true,
        name: true,
        code: true,
      },
    });
    res.json(insurers);
  } catch (error) {
    console.error("Error fetching insurers:", error);
    res.status(500).json({ error: "Failed to fetch insurers" });
  }
});

export default router;

================
File: src/server/index.ts
================
import insurersRouter from "./routes/insurers";

// ... other imports and middleware ...

app.use("/api/insurers", insurersRouter);

================
File: src/types/google-maps.d.ts
================
declare global {
  interface Window {
    google: {
      maps: {
        places: {
          Autocomplete: new (
            input: HTMLInputElement,
            options?: google.maps.places.AutocompleteOptions
          ) => google.maps.places.Autocomplete;
        };
        event: {
          clearInstanceListeners: (instance: any) => void;
        };
      };
    };
  }
}

export {};

================
File: src/types/index.ts
================
export type ClaimStatus = "Open" | "Assessing" | "Closed";

export interface Claim {
  id: string;
  claimId: string;
  deductible: string;
  shopName: string;
  lastName: string;
  firstName: string;
  contact: string;
  status: ClaimStatus;
}

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.tsx
================
// src/App.tsx
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { MainLayout } from "./components/layout/MainLayout";
import { Dashboard } from "./pages/Dashboard";
import { NewClaimForm } from "./components/claims/NewClaimForm";
import { ClaimInfoTab } from "./components/claims/tabs/ClaimInfoTab";
import { PartsTab } from "./components/claims/tabs/parts/PartsTab";
import { AnnexesTab } from "./components/claims/tabs/AnnexesTab";

const App = () => {
  return (
    <BrowserRouter>
      <MainLayout>
        <Routes>
          <Route path="/" element={<Dashboard />} />
          <Route path="/claims/new" element={<NewClaimForm />}>
            <Route index element={<Navigate to="claim-info" replace />} />
            <Route path="claim-info" element={<ClaimInfoTab />} />
            <Route path="parts" element={<PartsTab />} />
            <Route path="annexes" element={<AnnexesTab />} />
          </Route>
        </Routes>
      </MainLayout>
    </BrowserRouter>
  );
};

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/main.tsx
================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.tsx";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .env.example
================
VITE_GOOGLE_MAPS_KEY=your_google_maps_api_key_here

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment variables
.env
.env.local
.env.*.local

================
File: document-checkpoint1.md
================
# CCMS Parts Management Documentation

## Component Hierarchy

```
PartsTab/
├── ActionButtons/
│   ├── Add from NAGS
│   ├── Add Custom Part
│   ├── Add Labor
│   ├── Add Deductible Buyback
│   └── Add Rebate
├── PartEntryForm (Dynamic)/
│   ├── NAGS Form
│   ├── Custom Part Form
│   ├── Labor Form
│   ├── Deductible Form
│   └── Rebate Form
├── PartsTable/
│   ├── Part Number
│   ├── Description
│   ├── List Price
│   ├── Shop Price
│   └── Carrier Price
├── FinancialSummary/
│   ├── Subtotal
│   ├── Tax
│   └── Total
└── ShopInvoice/
    ├── Basic Info
    │   ├── Number
    │   ├── Date
    │   └── Shop Amount
    ├── Financial Details
    │   ├── Pre Tax Amount
    │   ├── Shop Admin Fee (% and $)
    │   ├── Shop Admin Fee Tax
    │   ├── Deductible
    │   ├── Total
    │   ├── Shop Amount
    │   └── Variance
    └── Upload Section
```

## Component Functions

### 1. PartsTab

**Purpose**: Main container for parts management functionality  
**Location**: `src/components/claims/tabs/parts/PartsTab.tsx`  
**Functions**:

- Manages active form state
- Coordinates communication between components
- Handles layout and component organization

### 2. Action Buttons

**Purpose**: Trigger different part entry forms  
**Location**: Within PartsTab  
**States**:

- NAGS (default active)
- Custom Part
- Labor
- Deductible Buyback
- Rebate

### 3. PartEntryForm

**Purpose**: Dynamic form for entering different types of parts/items  
**Location**: `src/components/claims/tabs/parts/PartEntryForm.tsx`  
**Props**:

- formType: "nags" | "custom" | "labor" | "deductible" | "rebate"
- onClose: () => void
- onSubmit: (data: any) => void

### 4. PartsTable

**Purpose**: Display and manage added parts  
**Location**: `src/components/claims/tabs/parts/PartsTable.tsx`  
**Features**:

- Display parts in tabular format
- Sort functionality (planned)
- Edit/Delete parts (planned)

### 5. FinancialSummary

**Purpose**: Show financial calculations  
**Location**: `src/components/claims/tabs/parts/FinancialSummary.tsx`  
**Calculations**:

- Subtotal of all parts
- Tax calculations
- Total amount

### 6. ShopInvoice

**Purpose**: Manage shop invoice details and uploads  
**Location**: `src/components/claims/tabs/parts/ShopInvoice.tsx`  
**Features**:

- Invoice information entry
- Financial calculations
- Document upload capability
- Variance calculation

## State Management

Currently using local React state with useState  
Future considerations:

- Implement Redux/Context for global state
- Add form validation
- Implement calculation logic

## Planned Features

1. Form validation
2. Part search functionality
3. Tax calculation automation
4. Document preview
5. Part price history
6. Audit trail

## File Structure

```
src/
└── components/
    └── claims/
        ├── modals/
        │   └── UploadModal.tsx
        └── tabs/
            └── parts/
                ├── PartsTab.tsx
                ├── PartEntryForm.tsx
                ├── PartsTable.tsx
                ├── FinancialSummary.tsx
                ├── ShopInvoice.tsx
                └── ShopInvoiceUpload.tsx
```

## Development Guidelines

1. Use TypeScript for type safety
2. Follow Tailwind CSS conventions
3. Implement responsive design
4. Add proper error handling
5. Include loading states
6. Add proper accessibility attributes

## Getting Started

1. Install dependencies:

```bash
npm install
npm install -D @tailwindcss/forms
```

2. Configure Tailwind:

```js
// tailwind.config.js
module.exports = {
  plugins: [require("@tailwindcss/forms")],
};
```

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "ccms",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-icons": "^1.3.2",
    "@shadcn/ui": "^0.0.4",
    "@tanstack/react-query": "^5.62.8",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.9",
    "clsx": "^2.1.1",
    "lucide-react": "^0.468.0",
    "postcss": "^8.4.49",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-dropzone": "^14.3.5",
    "react-hook-form": "^7.54.1",
    "react-router-dom": "^7.0.2",
    "tailwind-merge": "^2.5.5",
    "tailwindcss": "^3.4.17",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.17",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.13.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.1",
    "vite": "^6.0.3"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "ccms",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@prisma/client": "^6.1.0",
    "@radix-ui/react-icons": "^1.3.2",
    "@shadcn/ui": "^0.0.4",
    "@tanstack/react-query": "^5.62.8",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.9",
    "clsx": "^2.1.1",
    "lucide-react": "^0.468.0",
    "postcss": "^8.4.49",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-dropzone": "^14.3.5",
    "react-hook-form": "^7.54.1",
    "react-router-dom": "^7.0.2",
    "tailwind-merge": "^2.5.5",
    "tailwindcss": "^3.4.17",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/google.maps": "^3.58.1",
    "@types/react": "^18.3.17",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.13.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.1",
    "vite": "^6.0.3"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
